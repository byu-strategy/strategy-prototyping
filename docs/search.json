[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "STRAT 490R - Creating Digital Products with AI: Strategy & Prototyping",
    "section": "",
    "text": "Syllabus\nFALL 2025\nInstructor: Scott Murff\nTAs: Carter Adams, Eli Nelson\nClass Time: Fridays Only, 9:30 AM – 12:15 PM\nClass Location: TNRB 230\nLMS: LearningSuite",
    "crumbs": [
      "Course Information",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "index.html#content-overview",
    "href": "index.html#content-overview",
    "title": "STRAT 490R - Creating Digital Products with AI: Strategy & Prototyping",
    "section": "Content Overview",
    "text": "Content Overview\nWelcome to Creating Digital Products with AI: Strategy & Prototyping.\nWhat should a product manager be able to do in the era of AI? This course offers a hands-on, forward-looking answer.\nStudents will explore foundational frameworks in product strategy, customer-centric design, and rapid iteration. Along the way, they’ll leverage both standard industry tools (i.e. GitHub, Jira, Figma) as well as modern AI tools (e.g. Lovable, Replit, Cursor, Windsurf) to ideate, prototype, and build real digital products.\nAI is blurring the traditional boundaries between Product Management, Engineering, and Design. This course explores how product managers can use AI to enhance collaboration and accelerate execution.\nThroughout the course, students will learn how AI is reshaping every stage of the product lifecycle, from identifying customer needs and defining MVPs to accelerating prototyping, testing, and user feedback. By the end of the semester, students will have developed and validated an AI-enabled product, preparing them to excel in a world where successful product management requires both strategic insight and hands-on experimentation with emerging technologies.\nThere are no formal prerequisites for the course, but students should have an interest in going deep on a technical level and will learn to code with help from AI.",
    "crumbs": [
      "Course Information",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "index.html#learning-outcomes",
    "href": "index.html#learning-outcomes",
    "title": "STRAT 490R - Creating Digital Products with AI: Strategy & Prototyping",
    "section": "Learning Outcomes",
    "text": "Learning Outcomes\n\n\n\n\n\n\n\nLearning Outcome\nSupported BYU Aims\n\n\n\n\n1. Understand the basics of how LLMs generate natural language.\nIntellectually Enlarging\n\n\n2. Develop and articulate a product strategy.\nIntellectually Enlarging, Lifelong Learning and Service\n\n\n3. Analyze the physical, mental, and spiritual impact your product is likely to have on its users.\nSpiritually Strengthening, Character Building, Lifelong Learning and Service\n\n\n4. Create a digital product that delivers value to a target customer group.\nIntellectually Enlarging, Lifelong Learning and Service",
    "crumbs": [
      "Course Information",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "index.html#instructor-bio",
    "href": "index.html#instructor-bio",
    "title": "STRAT 490R - Creating Digital Products with AI: Strategy & Prototyping",
    "section": "Instructor Bio",
    "text": "Instructor Bio\nScott Murff is an Associate Teaching Professor of Strategy at the BYU Marriott School of Business, where he also serves as program director and teaches courses on business strategy, decision-making, and artificial intelligence. He brings over 15 years of experience at the intersection of business and technology, having worked as a consultant, product manager, and data scientist.\nPrior to joining BYU, Scott spent nearly seven years at McKinsey & Company in roles ranging from analytics specialist consultant to principal product manager, where he led product development and performance management initiatives for Fortune 500 clients. His earlier career includes building forecasting models as a VP at Zions Bancorporation and conducting regulatory research at the U.S. Office of the Comptroller of the Currency.\nScott holds a Master’s degree in Management Science & Engineering from Stanford University and a B.A. in Economics with a minor in Math, from BYU. He is passionate about helping students apply AI, analytics, and strategy to meaningful real-world problems with both rigor and purpose.",
    "crumbs": [
      "Course Information",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "index.html#schedule",
    "href": "index.html#schedule",
    "title": "STRAT 490R - Creating Digital Products with AI: Strategy & Prototyping",
    "section": "Schedule",
    "text": "Schedule\nSee the Schedule section for a weekly schedule of class topics, assignments, due dates, etc.",
    "crumbs": [
      "Course Information",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "index.html#grading",
    "href": "index.html#grading",
    "title": "STRAT 490R - Creating Digital Products with AI: Strategy & Prototyping",
    "section": "Grading",
    "text": "Grading\nBelow is the grading breakdown for each assessment in the course. Each point is weighted equally.\n\n\n\nType\nDescription1\n% of Grade\nPoints\nLearning Outcome(s) Assessed\n\n\n\n\nExam\nPre-Course Knowledge Check2\n0%\n0\n1,2,3,4\n\n\nExam\nFinal Exam\n10%\n50\n1,2,3,4\n\n\nQuiz\nQuiz 1 - LLMs 1\n2%\n10\n1\n\n\nQuiz\nQuiz 2 - LLMs 2\n2%\n10\n1\n\n\nQuiz\nQuiz 3 - Product Strategy and Innovation\n2%\n10\n2\n\n\nQuiz\nQuiz 4 - Customer Validation\n2%\n10\n2\n\n\nQuiz\nQuiz 5 - Mid-semester Feedback Survey\n2%\n10\n\n\n\nQuiz\nQuiz 6 - GitHub and Collaboration\n2%\n10\n4\n\n\nQuiz\nQuiz 7 - APIs and How the Internet Works\n2%\n10\n4\n\n\nQuiz\nQuiz 8 - Principles of Software Engineering and Design\n2%\n10\n4\n\n\nQuiz\nQuiz 9 - AI Tools\n2%\n10\n4\n\n\nQuiz\nQuiz 10 - Product Metrics and Data Analysis\n2%\n10\n4\n\n\nHomework\nHomework 1 – Understanding Large Language Models\n8%\n40\n1\n\n\nHomework\nHomework 2 – Creating a Product Requirements Document (PRD)\n8%\n40\n2, 3\n\n\nHomework\nHomework 3 – Understanding the internet and APIs\n8%\n40\n4\n\n\nHomework\nHomework 4 – Using Git for collaboration and version control\n8%\n40\n4\n\n\nHomework\nHomework 5 – Choosing the right AI tools\n8%\n40\n4\n\n\nProject\nFinal Project\n30%\n150\n4\n\n\n\nTOTAL\n100%\n500\n\n\n\n\n\nNotes:\n\nCompletion of the Pre-Course Knowledge Check is required but does not affect your grade.\nAll assignments and quizzes are described in detail in Assessments section.\n\n\nThe course is not graded on a curve. It’s possible for every student to earn an A.\nAchieving an A is challenging and reflects real commitment and excellence.\nThe grading scale is show below:\n\n\n\nLetter Grade\nPercentage Range\nGPA\n\n\n\n\nA\n93–100%\n4.0\n\n\nA-\n90–92%\n3.7\n\n\nB+\n87–89%\n3.4\n\n\nB\n83–86%\n3.0\n\n\nB-\n80–82%\n2.7\n\n\nC+\n77–79%\n2.4\n\n\nC\n73–76%\n2.0\n\n\nC-\n70–72%\n1.7\n\n\nD+\n67–69%\n1.4\n\n\nD\n63–66%\n1.0\n\n\nD-\n60–62%\n0.7\n\n\nE (Fail)\nBelow 60%\n0.0\n\n\n\n\nLate work policy\nQuizzes: By their nature, in-class quizzes cannot be accepted late.\nHomework: May be turned in up to 9 days late for partial credit with a 10% penalty per day according to the following schedule:\n\n\n\nDays Late\nLate Penalty\n\n\n\n\n1\n-10%\n\n\n2\n-20%\n\n\n3\n-30%\n\n\n4\n-40%\n\n\n5\n-50%\n\n\n6\n-60%\n\n\n7\n-70%\n\n\n8\n-80%\n\n\n9\n-90%\n\n\n10\nNo Credit\n\n\n\nFinal Project: The Final Project must be submitted by 11:59pm on the day of our final class period. Final Projects cannot be turned in late for credit.\nFinal Exam: The Final Exam must be completed by the scheduled time. Final Exams cannot be taken late.",
    "crumbs": [
      "Course Information",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "index.html#classroom-culture",
    "href": "index.html#classroom-culture",
    "title": "STRAT 490R - Creating Digital Products with AI: Strategy & Prototyping",
    "section": "Classroom Culture",
    "text": "Classroom Culture\n\nMission and Aims\nThe mission of Brigham Young University — founded, supported, and guided by The Church of Jesus Christ of Latter-day Saints — is to assist individuals in their quest for perfection and eternal life. That assistance should provide a period of intensive learning in a stimulating setting where a commitment to excellence is expected and the full realization of human potential is pursued.\nBYU seeks to develop students of faith, intellect, and character who have the skills and the desire to continue learning and to serve others throughout their lives.\nA BYU education should be (1) spiritually strengthening, (2) intellectually enlarging, and (3) character building, leading to (4) lifelong learning and service.\nBuilding on the foundational Mission and Aims, the Marriott School of Business aspires to transform the world through Christlike leadership by developing leaders of faith, intellect, and character guided by the following 4 values:\n\nFaith in Christ - We value deep and abiding faith in Jesus Christ. Our faith gives us the capacity to envision a better future, the confidence to make that future happen, and the courage to act in the face of challenges.\nIntegrity in Action - We value integrity and hold ourselves to the highest moral and ethical standards. Acting with integrity builds trust, strengthens character, and focuses our ambitions on things of eternal consequence.\nRespect for All - We value respect for all individuals as children of God and recognize the inherent worth, divine potential, and agency of each person. A climate of respect and belonging enhances our learning, facilitates collaboration, and encourages personal growth.\nExcellence - We value excellence in learning, teaching, research, management, and leadership. An expectation of excellence magnifies our influence and motivates us to continually improve.\n\nWe evaluate our decisions and actions by the impact they will have on the academic experience, professional preparation, character development, emotional well-being, and spiritual growth of our students.\n\nPrayer in class\nWe will begin each class with prayer. Each class member is invited to be voice for the prayer at least once throughout the semester. The TAs will reach out prior to class to invite you to pray on a particular day. If you’d rather not be voice for a prayer please let me know on the first day of class so I can instruct the TAs accordingly.\n\n\nLaptop Policy\nYou may use laptops in class for note taking or other class related purposes. Laptops should not be used for activities that would be a distraction to nearby students when your screen is in their line of sight (e.g. sports, instagram, etc.)\n\n\nCold Calling\nI teach in a conversational discussion based style, which includes cold calling students to ask for your input or to pose questions. If you’d rather I not cold call on you please let me know on the first day of class so that I can avoid doing so. I have deep respect for individual learning styles and will make accommodations when needed.",
    "crumbs": [
      "Course Information",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "index.html#required-materials",
    "href": "index.html#required-materials",
    "title": "STRAT 490R - Creating Digital Products with AI: Strategy & Prototyping",
    "section": "Required Materials",
    "text": "Required Materials\nThe Lean Product Playbook: How to Innovate with Minimum Viable Products and Rapid Customer Feedback by Dan Olsen (physical copy recommended, $25 or less). Text and audio also available for free for BYU students digitally at O’Reilly books.\nA modern Laptop or desktop (Mac or Windows).\nPaid account to at least 1 AI tool of your choosing (~$20 per month).\nAll other materials are provided for free on the course website.",
    "crumbs": [
      "Course Information",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "index.html#getting-help",
    "href": "index.html#getting-help",
    "title": "STRAT 490R - Creating Digital Products with AI: Strategy & Prototyping",
    "section": "Getting Help",
    "text": "Getting Help\nThe following resources are available to get help:\n\nStart with AI chat bots and the course website to see if they can assist\nUse the course Slack channel to ask classmates for help\nAttend TA or Professor office hours\nUse Slack or email to contact one of the course TAs\nUse Slack or email to contact Professor Murff",
    "crumbs": [
      "Course Information",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "index.html#pre-enrollment-assessment",
    "href": "index.html#pre-enrollment-assessment",
    "title": "STRAT 490R - Creating Digital Products with AI: Strategy & Prototyping",
    "section": "Pre-enrollment Assessment",
    "text": "Pre-enrollment Assessment\nComing soon.",
    "crumbs": [
      "Course Information",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Syllabus</span>"
    ]
  },
  {
    "objectID": "00-schedule.html",
    "href": "00-schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Below is the planned daily schedule. Dates, topics, and assignments may adjust as needed. All readings, slides, and homework are linked here.\n\n\n\nWeek\nDate\nTopics\nIn-class Quiz\nHomework Assigned\nHomework Due\n\n\n\n\n1\nFri, Sept 5\nCourse overview, Product Management and AI, Thought Leaders, Intro to LLMs\n–\n–\n–\n\n\n2\nFri, Sept 12\nLLMs continued, Prompt engineering\nQuiz 1 - LLMs 1\nHW 1 - Understanding Large Language Models\nFri, Sept 26\n\n\n3\nFri, Sept 19\nProduct Innovation Process, Target Market, Customer Discovery\nQuiz 2 - LLMs 2\n–\n–\n\n\n4\nFri, Sept 26\nValue prop design, hypothesize customer needs/unfulfilled jobs, customer pain/gain. Principles for choosing problems to work on. Validate customer needs: Prototyping intro · No-code/low-code tools · Figma or Glide workshop\nQuiz 3 - Product Strategy and Innovation\nHW 2 - Creating a Product Requirements Document (PRD)\nFri, Oct 10\n\n\n5\nFri, Oct 3\nProject Management with Jira, Backlog, user stories\nQuiz 4 - Customer Validation\n–\n–\n\n\n6\nFri, Oct 10\nGit/GitHub - Collaboration across PM, Eng, Design, Psychological safety, The triad and how it’s changing (ratios of PMs to engineers)\nQuiz 5 - Mid-semester Feedback Survey\nHW 3 - Understanding the internet and APIs\nFri, Oct 24\n\n\n7\nFri, Oct 17\nInternet fundamentals · APIs · JSON & HTTP requests\nQuiz 6 - GitHub and Collaboration\n–\n–\n\n\n8\nFri, Oct 24\nPrinciples of software engineering & Design\nQuiz 7 - APIs and How the Internet Works\nHW 4 - Using Git for collaboration and version control\nFri, Nov 14\n\n\n9\nFri, Oct 31\nV0, Bolt, Replit, Lovable, Cursor, Windsurf (homework: Build the same app in 5 platforms. Write up what you could do in each. Limitations.)\nQuiz 8 - Principles of Software Engineering and Design\n–\n–\n\n\n10\nFri, Nov 7\nBuild and feedback 1\nQuiz 9 - AI Tools\nHW 5 - Choosing the right AI tools\nFri, Nov 21\n\n\n11\nFri, Nov 14\nProduct metrics\nQuiz 10 - Product Metrics and Data Analysis\n–\n–\n\n\n12\nFri, Nov 21\nBuild and feedback 2\n–\n–\n–\n\n\n13\nFri, Nov 28\nNo class – Thanksgiving\n–\n–\n–\n\n\n14\nFri, Dec 5\nFinal Presentations · Reflections\n–\nExtra Credit - Student Ratings\nFinal Project Due\n\n\n15\nFri, Dec 12\nFinal Exam (50 questions, multiple choice, testing center)\n–\n–\n–",
    "crumbs": [
      "Course Information",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Schedule</span>"
    ]
  },
  {
    "objectID": "00-assessments.html",
    "href": "00-assessments.html",
    "title": "Assessments",
    "section": "",
    "text": "List of All Assessments\nThe following assessments will be used to measure progress towards learning outcomes and to assign grades.",
    "crumbs": [
      "Course Information",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Assessments</span>"
    ]
  },
  {
    "objectID": "00-assessments.html#list-of-all-assessments",
    "href": "00-assessments.html#list-of-all-assessments",
    "title": "Assessments",
    "section": "",
    "text": "Type\nDescription\n% of Grade\nPoints\nLearning Outcome(s) Assessed1\n\n\n\n\nExam\nPre-Course Knowledge Check\n0%\n0\n1,2,3,4\n\n\nExam\nFinal Exam\n10%\n50\n1,2,3,4\n\n\nQuiz\nQuiz 1 - LLMs 1\n2%\n10\n1\n\n\nQuiz\nQuiz 2 - LLMs 2\n2%\n10\n1\n\n\nQuiz\nQuiz 3 - Product Strategy and Innovation\n2%\n10\n2\n\n\nQuiz\nQuiz 4 - Customer Validation\n2%\n10\n2\n\n\nQuiz\nQuiz 5 - Mid-semester Feedback Survey\n2%\n10\n\n\n\nQuiz\nQuiz 6 - GitHub and Collaboration\n2%\n10\n4\n\n\nQuiz\nQuiz 7 - APIs and How the Internet Works\n2%\n10\n4\n\n\nQuiz\nQuiz 8 - Principles of Software Engineering and Design\n2%\n10\n4\n\n\nQuiz\nQuiz 9 - AI Tools\n2%\n10\n4\n\n\nQuiz\nQuiz 10 - Product Metrics and Data Analysis\n2%\n10\n4\n\n\nHomework\nHomework 1 – Understanding Large Language Models\n8%\n40\n1\n\n\nHomework\nHomework 2 – Creating a Product Requirements Document (PRD)\n8%\n40\n2, 3\n\n\nHomework\nHomework 3 – Understanding the internet and APIs\n8%\n40\n4\n\n\nHomework\nHomework 4 – Using Git for collaboration and version control\n8%\n40\n4\n\n\nHomework\nHomework 5 – Choosing the right AI tools\n8%\n40\n4\n\n\nProject\nFinal Project\n30%\n150\n4\n\n\n\nTOTAL\n100%\n500\n\n\n\n\n\nNotes\n\nTable of Learning Outcomes\n\n\n\n\n\n\n\n\nLearning Outcome\nSupported BYU Aims\n\n\n\n\n1. Understand the basics of how LLMs generate natural language.\nIntellectually Enlarging\n\n\n2. Develop and articulate a product strategy.\nIntellectually Enlarging, Lifelong Learning and Service\n\n\n3. Analyze the physical, mental, and spiritual impact your product is likely to have on its users.\nSpiritually Strengthening, Character Building, Lifelong Learning and Service\n\n\n4. Create a digital product that delivers value to a target customer group.\nIntellectually Enlarging, Lifelong Learning and Service",
    "crumbs": [
      "Course Information",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Assessments</span>"
    ]
  },
  {
    "objectID": "00-assessments.html#exams",
    "href": "00-assessments.html#exams",
    "title": "Assessments",
    "section": "Exams",
    "text": "Exams\n\nPre-Course Knowledge Check\n\n\nFinal Exam",
    "crumbs": [
      "Course Information",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Assessments</span>"
    ]
  },
  {
    "objectID": "00-assessments.html#homework",
    "href": "00-assessments.html#homework",
    "title": "Assessments",
    "section": "Homework",
    "text": "Homework\n\nHomework 1 – Understanding Large Language Models\n\n\nHomework 2 – Creating a Product Requirements Document (PRD)\n\n\nHomework 3 – Understanding the internet and APIs\n\n\nHomework 4 – Using Git for collaboration and version control\n\n\nHomework 5 – Choosing the right AI tools",
    "crumbs": [
      "Course Information",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Assessments</span>"
    ]
  },
  {
    "objectID": "00-assessments.html#quizzes",
    "href": "00-assessments.html#quizzes",
    "title": "Assessments",
    "section": "Quizzes",
    "text": "Quizzes\nAll quizzes are given during class and will consist of five questions drawn from the associated readings and displayed on the projector. Responses will be written on a note card and turned in during class. Smartphones and laptops or any other aids are not allowed during the quizzes. The purpose of these quizzes is to assess your unaided understanding of the course material.\nA list of the quiz dates and associated readings are shown on the course schedule.",
    "crumbs": [
      "Course Information",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Assessments</span>"
    ]
  },
  {
    "objectID": "00-assessments.html#final-project",
    "href": "00-assessments.html#final-project",
    "title": "Assessments",
    "section": "Final Project",
    "text": "Final Project",
    "crumbs": [
      "Course Information",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Assessments</span>"
    ]
  },
  {
    "objectID": "00-assessments.html#feedback-surveys",
    "href": "00-assessments.html#feedback-surveys",
    "title": "Assessments",
    "section": "Feedback Surveys",
    "text": "Feedback Surveys\n\nMid-Semester Feedback Survey\n\n\nCourse Student Ratings",
    "crumbs": [
      "Course Information",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Assessments</span>"
    ]
  },
  {
    "objectID": "01-pm-ai-era-llms.html",
    "href": "01-pm-ai-era-llms.html",
    "title": "AI Product Management",
    "section": "",
    "text": "History of Product Management\nSoftware Is Eating the World\nSoftware ate the world.",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>AI Product Management</span>"
    ]
  },
  {
    "objectID": "01-pm-ai-era-llms.html#ai-product-management",
    "href": "01-pm-ai-era-llms.html#ai-product-management",
    "title": "AI Product Management",
    "section": "AI Product Management",
    "text": "AI Product Management\n\n\n\nAI Product Management Learning Roadmap from Paweł Huryn\n\n\nAI Will Save the World(?)",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>AI Product Management</span>"
    ]
  },
  {
    "objectID": "01-pm-ai-era-llms.html#ai-and-machine-learning",
    "href": "01-pm-ai-era-llms.html#ai-and-machine-learning",
    "title": "AI Product Management",
    "section": "AI and Machine Learning",
    "text": "AI and Machine Learning\n\n\n\nImage source: Build a Large Language Model (From Scratch) by Sebastian Raschka\n\n\n\nSupervised Learning\n\n\nGradient Descent",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>AI Product Management</span>"
    ]
  },
  {
    "objectID": "02-llms-prompt-engineering.html",
    "href": "02-llms-prompt-engineering.html",
    "title": "LLMs & Prompting",
    "section": "",
    "text": "Large Language Models and GenAI",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>LLMs & Prompting</span>"
    ]
  },
  {
    "objectID": "02-llms-prompt-engineering.html#large-language-models-and-genai",
    "href": "02-llms-prompt-engineering.html#large-language-models-and-genai",
    "title": "LLMs & Prompting",
    "section": "",
    "text": "Embeddings\n\n\nNeural Networks\n\n\nFoundation Models\n\n\nModel Fine-Tuning\n\n\nRetrieval Augmented Generation",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>LLMs & Prompting</span>"
    ]
  },
  {
    "objectID": "02-llms-prompt-engineering.html#prompt-engineering",
    "href": "02-llms-prompt-engineering.html#prompt-engineering",
    "title": "LLMs & Prompting",
    "section": "Prompt Engineering",
    "text": "Prompt Engineering\n\nAnatomy of Various Prompt Structures\n\n\nProgramatic and Dynamic Prompting",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>LLMs & Prompting</span>"
    ]
  },
  {
    "objectID": "03-product-innovation.html",
    "href": "03-product-innovation.html",
    "title": "Product Innovation",
    "section": "",
    "text": "The Lean Product Process",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Product Innovation</span>"
    ]
  },
  {
    "objectID": "03-product-innovation.html#target-customer",
    "href": "03-product-innovation.html#target-customer",
    "title": "Product Innovation",
    "section": "Target Customer",
    "text": "Target Customer\n\nUser personas",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Product Innovation</span>"
    ]
  },
  {
    "objectID": "03-product-innovation.html#underserved-needs",
    "href": "03-product-innovation.html#underserved-needs",
    "title": "Product Innovation",
    "section": "Underserved Needs",
    "text": "Underserved Needs\n\nImportance vs Satisfaction\n\n\nJobs to be done",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Product Innovation</span>"
    ]
  },
  {
    "objectID": "03-product-innovation.html#value-proposition",
    "href": "03-product-innovation.html#value-proposition",
    "title": "Product Innovation",
    "section": "Value Proposition",
    "text": "Value Proposition",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Product Innovation</span>"
    ]
  },
  {
    "objectID": "03-product-innovation.html#feature-set",
    "href": "03-product-innovation.html#feature-set",
    "title": "Product Innovation",
    "section": "Feature Set",
    "text": "Feature Set\n\nUser Stories",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Product Innovation</span>"
    ]
  },
  {
    "objectID": "03-product-innovation.html#user-experience",
    "href": "03-product-innovation.html#user-experience",
    "title": "Product Innovation",
    "section": "User Experience",
    "text": "User Experience\n\nPrinciples of UX Design",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Product Innovation</span>"
    ]
  },
  {
    "objectID": "04-value-prop-design.html",
    "href": "04-value-prop-design.html",
    "title": "Value Proposition & Design",
    "section": "",
    "text": "Design and Protyping Tools",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Value Proposition & Design</span>"
    ]
  },
  {
    "objectID": "04-value-prop-design.html#design-and-protyping-tools",
    "href": "04-value-prop-design.html#design-and-protyping-tools",
    "title": "Value Proposition & Design",
    "section": "",
    "text": "Figma\n\n\n\nReplit, Bolt, V0, Lovable",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Value Proposition & Design</span>"
    ]
  },
  {
    "objectID": "04-value-prop-design.html#customer-feedback-and-rapid-iteration",
    "href": "04-value-prop-design.html#customer-feedback-and-rapid-iteration",
    "title": "Value Proposition & Design",
    "section": "Customer Feedback and Rapid Iteration",
    "text": "Customer Feedback and Rapid Iteration",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Value Proposition & Design</span>"
    ]
  },
  {
    "objectID": "05-project-management-jira.html",
    "href": "05-project-management-jira.html",
    "title": "Project Mgmt w/Jira",
    "section": "",
    "text": "Agile\nManifesto for Agile Software Development",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Project Mgmt w/Jira</span>"
    ]
  },
  {
    "objectID": "05-project-management-jira.html#agile",
    "href": "05-project-management-jira.html#agile",
    "title": "Project Mgmt w/Jira",
    "section": "",
    "text": "Cerimonies\n\n\nScrum and Kanban",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Project Mgmt w/Jira</span>"
    ]
  },
  {
    "objectID": "05-project-management-jira.html#user-stories",
    "href": "05-project-management-jira.html#user-stories",
    "title": "Project Mgmt w/Jira",
    "section": "User Stories",
    "text": "User Stories",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Project Mgmt w/Jira</span>"
    ]
  },
  {
    "objectID": "05-project-management-jira.html#jira-and-github-projects",
    "href": "05-project-management-jira.html#jira-and-github-projects",
    "title": "Project Mgmt w/Jira",
    "section": "Jira and GitHub Projects",
    "text": "Jira and GitHub Projects",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Project Mgmt w/Jira</span>"
    ]
  },
  {
    "objectID": "06-collaboration-git-triad.html",
    "href": "06-collaboration-git-triad.html",
    "title": "GitHub & Collaboration",
    "section": "",
    "text": "Git & GitHub\nAlthough the terms Git and GitHub are often used interchangeably, they are two distinct tools that work together.\nGit is an open-source version control system that individual users install on their local computer. It tracks every change you make to the files in a specified folder (called a repository) and acts like a time machine allowing you to go back to any previous version, see what changed, when it changed, and who made the change. Git is the most widely used version control system in the world, with an estimated 90–95% of professional software development teams using it today.\nGitHub is a cloud-based platform, owned by Microsoft, that allows you to store your Git repositories online, making it easy to collaborate with others over the internet. You can think of GitHub as the Google Drive or Dropbox of your code files, but with additional tools for teamwork and project management that extend the use of Git from individuals to entire teams. Developers use Git on their local machines and push their files and subsequent changes to GitHub when they’re ready to share or back them up online. Product Managers and other collaborators can then review, comment on, and track progress through the GitHub web interface.",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>GitHub & Collaboration</span>"
    ]
  },
  {
    "objectID": "06-collaboration-git-triad.html#the-four-sections-of-the-gitgithub-workflow",
    "href": "06-collaboration-git-triad.html#the-four-sections-of-the-gitgithub-workflow",
    "title": "GitHub & Collaboration",
    "section": "The Four Sections of the Git/GitHub Workflow",
    "text": "The Four Sections of the Git/GitHub Workflow\nA typical workflow in get consists of editing files in your working directory, staging them, which just means listing which ones you want to save, saving or committing them and lastly, pushing them to a remote cloud hosted folder for others to use.\n1. Working Directory\nThe Working Directory is the folder on your computer where you’re actively making changes to files such as writing code, editing documents, or creating new files.\nA Working Directory is just a regular folder you’re already familiar with, the kind you see in Windows Explorer or Mac Finder.\n2. Staging Area\nThe Staging Area is a place where you catalogue (or “stage”) the edited files from the Working Directory that you want to include in your next snapshot (version) of your project.\nEach snapshot is called a commit, and the Staging Area lets you choose exactly which edited files will be saved in the next official version of your project.\nEven if you’ve edited, say, 5 files, you may only want to include 3 of those changed files in your next commit. The Staging Area is where you make these choices, it gives you control over what gets saved and when.\nYou may hear the Staging Area referred to as the index because that’s the technical name Git uses internally for this part of the system.\n3. Local Repository\nThe Local Repository is the part of Git on your computer that stores the official history of your project: all the snapshots (commits) you’ve made so far.\nWhen you commit (i.e., Save) changes from the Staging Area, Git saves a permanent version of those changes in your Local Repository. This allows you to go back in time, review past versions, undo mistakes, or see who changed what and why.\nYou can think of the Local Repository as your personal project archive that keeps track of every meaningful step in your project’s development.\nUnlike the Working Directory, the Local Repository is not a folder you typically see in Finder or Windows Explorer, rather, it lives inside a hidden folder named .git. Git uses the hidden .git folder to store all your commits as well as other project related information. It is possible to unhide the .git folder and browse it like a normal folder but many of the files are not human readable since they are designed for Git’s internal use and may look confusing or cryptic to most users.\nEven though the files in the .git folder aren’t meant to be read directly by humans, Git commands allow you to retrieve any saved snapshot of your project and restore files in their original, human-readable form.\nSo the local repository contains everything from your Working Directory that you chose to stage and then commit.\nThink of the .git folder as a vault of your project’s history. You can’t really read the vault contents directly, but Git gives you keys (commands) to retrieve and restore anything you’ve ever committed.\n4. Remote Repository\nThe Remote Repository is a copy of your Local Repository that is stored on the internet using a platform like GitHub.\nIt contains the same kinds of commits and project history as your Local Repository, but it’s shared with others, which makes it perfect for collaborating with teammates, backing up your work, or deploying projects.\nYour Local Repository is your personal copy, just on your computer.\nThe Remote Repository is the shared copy in the cloud that you and your team keep in sync.",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>GitHub & Collaboration</span>"
    ]
  },
  {
    "objectID": "06-collaboration-git-triad.html#illustrating-the-workflow",
    "href": "06-collaboration-git-triad.html#illustrating-the-workflow",
    "title": "GitHub & Collaboration",
    "section": "Illustrating the Workflow",
    "text": "Illustrating the Workflow\nThe illustration below helps you visualize the four parts of a Git workflow.\n\nThe most fundamental unit in Git is a repository, often called a repo for short. A repository is a special folder that contains all the files related to your project, along with the metadata Git uses to track the full history of changes.\nThe best way to\nGit and GitHub Operate on a Four-Level Hierarchy\nGit and GitHub organize your project using a four-level hierarchy, each building on the one below:\nLevel 1 – Files\nThese are the individual files in your project, most commonly plain text files containing code (like .py, .html, or .js), but other file types such as images (.png, .jpg) and data files (.csv, .json) are also supported and commonly used.\nLevel 2 – Commits\nA commit is a snapshot of your entire project at a specific point in time. Git stores the exact state of all tracked files when you make a commit. Each commit has a unique identifier called a hash (e.g., f04e112) that lets you reference or return to that version.\nThe word commit can be both a noun (“This commit broke the build”) and a verb (“I’m committing my changes”), meaning to save a snapshot of the current state of your project.\nLevel 3 – Branches\nA branch is a named reference (a pointer) to the latest commit in a line of development.\nHEAD is a special pointer that tracks where you are in the Git repo.\nMost of the time, it points to a branch name (like main or feature-x). In special cases, HEAD can point directly to a commit, putting you in a detached HEAD state.\nA branch is a pointer to the most recent commit in a line of development. Because each commit remembers its parent, this pointer implicitly defines a sequence of commits — the branch’s history.\nA is a label (or pointer) to a single commit — specifically, the tip (latest commit) of a line of development. Git doesn’t store branches as separate sequences of commits. Instead:\nThe branch points to the most recent commit. That commit points to the previous commit. And so on, forming a linked list of history. Developers use branches to work on features or bug fixes in isolation. Most repositories have a default branch called main (previously called master), which typically represents the production-ready version of the code.\nWhen you check out a branch, Git updates your working directory to reflect the latest commit on that branch. You’re not editing that commit itself — instead, you’re preparing to build on top of it. Any changes you make and commit will be saved as a new commit, extending the history of the branch.\nLevel 4 – Repositories\nA repository (or repo) is the top-level container that holds all your project’s files, commit history, branches, and metadata. It’s essentially your entire project, tracked and version-controlled. Repositories can live on your local computer (with Git) or be hosted online (e.g., on GitHub) for sharing and collaboration.\n🔍 What Exactly Is in a Git Repository?\nA repository (or repo) in Git is the full structure that stores:\nCommits: Snapshots of the project’s file state over time Branches: Named pointers to specific commits Tags: Named, static pointers to commits (usually used for releases) Refs: Internally, all pointers (branches, tags, HEAD) are stored as refs Blobs: File contents (each version of each file) Trees: Directory structures (which files go in which folders) HEAD: A special ref pointing to your current working location Configuration: Repo settings like remotes, ignore rules, hooks, etc. So yes: a Git repo is the container for all of this — your entire project, including its full history and structure.\n\nSummary\n\n\n\n\n\n\n\n\nLevel\nConcept\nDescription\n\n\n\n\n1\nFiles\nThe individual contents of your project\n\n\n2\nCommits\nSnapshots of the project at specific points in time\n\n\n3\nBranches\nTimelines of commits used for parallel development\n\n\n4\nRepositories\nThe full project container with history and structure\n\n\n\nThis structure can be visualized as follows:\nAlthough they’re often mentioned together, Git and GitHub are not the same thing.\nRepositories: The Project Container\nA repository (or repo) is your entire project — like a folder that holds all your code, history, and collaboration tools. If you’re writing a novel, the repository is the whole book project, including every chapter, draft, and note you’ve ever made.\nOn your computer, a Git repo is just a regular folder with special tracking enabled. On GitHub, it’s a shared version of that folder hosted in the cloud where others can see, clone, or contribute.\nBranches: Versions You Can Work On Separately\nThe Four Main Conceptual Areas in Git\nHere’s a complete, beginner-friendly framework:\n\nWorking Directory The actual files and folders on your computer that you’re editing. What you see in your file explorer or code editor. Untracked or modified files live here. 👉 You can change files freely here, but Git doesn’t track them until you stage or commit them.\nStaging Area (a.k.a. Index) A preview of what will go into your next commit. You use git add to move changes from the working directory to the staging area. Think of it like a “shopping cart” of changes you’re getting ready to commit. 👉 This gives you fine-grained control over what goes into each commit.\nLocal Repository Where your commits live on your own computer. When you run git commit, you move changes from the staging area into your local repo. This is the full version history that Git manages in the .git directory. 👉 You can make lots of commits locally without pushing anything to the cloud.\nRemote Repository A shared copy of your repository hosted online (e.g., on GitHub). You use git push to send commits from your local repository to the remote. You use git pull or git fetch to bring changes from the remote down to your local repo. 👉 Enables collaboration, backups, and deployment.\n\nThe primary purpose of a branch in Git is to give a human-readable name to a commit, so you don’t have to use the full hash.\nWhy Branches Exist in Git\n\nCommits Are Identified by Hashes Every commit is named by a SHA-1 hash like:\n\nBranches Are Named Pointers A branch (like main, feature-x, or fix-bug-7) is a named reference to a commit. As you commit, the branch name moves forward to the new commit.\nmain → commit A → commit B → commit C refs/heads/main → abc123 → def456 → 9a3e6c2\n🧭 What a Branch Really Is\nA branch is just a label (a file inside .git/refs/heads/) that contains a commit hash. Example:\ncat .git/refs/heads/main Might output:\n9a3e6c2bd8c2fb4f09f7bbfe42f27f3853fccc60 That’s it. A branch is literally a text file with a hash in it.\nAs you commit, the branch “moves forward” automatically\nDetached HEAD mode means that HEAD is pointing directly to a specific commit hash, not to a branch.\nWhat Is Detached HEAD Mode?\nIn normal Git use:\nHEAD → main → commit abc123 In detached HEAD mode:\nHEAD → commit abc123 ← no branch involved This happens when you check out a commit directly:\ngit checkout abc123 Now you’re no longer “on a branch.” You’re just sitting on a specific commit.\n🎯 Why Is This Useful?\nYou might enter detached HEAD mode when:\nYou want to test or explore an old version without changing any branches You want to build something temporary, like a patch or debug run You’re checking out a tag (tags also point to commits) ⚠️ Gotcha: What Happens If You Commit in Detached Mode?\nYou can still make commits, and Git will let you — but:\nThey’ll be “floating” — not attached to any branch If you switch branches afterward, you could lose them unless you create a new branch from that point\nA commit is the fundamental unit in Git. Branches, tags, and HEAD are just labels or pointers to commits. Let’s unpack it a bit more clearly:\n🧱 Commits: The Core Building Blocks\nEvery commit: Has a unique SHA-1 hash Stores a snapshot of the project Links to its parent(s), forming the project history All real data lives in the commit graph Without any branches, Git would still work — you’d just need to use hashes to refer to everything. 🏷️ Branches: Named Pointers to Commits\nA branch is a label that moves as you add commits Think of it as a bookmark: main → commit ABC123 📌 HEAD: The “Current Position” Pointer\nHEAD is just a pointer to: A branch (e.g., main) → which points to a commit Or directly to a commit (in detached mode) 📷 Tags: Static Pointers to Commits\nA tag is like a permanent label (e.g., v1.0) Unlike branches, tags don’t move 🧠 Mental Model\n[Commit A] ← [Commit B] ← [Commit C] ↑ main, HEAD Commits = data Branches/tags = labels HEAD = where you currently are\n9a3e6c2bd8c2fb4f09f7bbfe42f27f3853fccc60\n\n\n\n\n\n\n\n\nCommand\nSyntax\nDescription\n\n\n\n\nInitialize repo\ngit init\nCreates a new Git repository in the current directory\n\n\nClone repo\ngit clone &lt;url&gt;\nCopies a remote repository to your local machine\n\n\nCheck status\ngit status\nShows the current state of working directory and staging area\n\n\nStage changes\ngit add &lt;file&gt;\nAdds file(s) to the staging area\n\n\n\ngit add .\nStages all changes in the current directory\n\n\nUnstage file\ngit restore --staged &lt;file&gt;\nRemoves a file from the staging area\n\n\nDiscard changes\ngit restore &lt;file&gt;\nReverts file to last committed state\n\n\nCommit changes\ngit commit -m \"&lt;message&gt;\"\nSaves staged changes with a message\n\n\n\ngit commit --amend\nModifies the last commit (e.g., to fix message)\n\n\nView log\ngit log\nShows commit history\n\n\n\ngit log --oneline --graph\nCondensed log with branch structure\n\n\nView diff\ngit diff\nShows unstaged changes\n\n\n\ngit diff --staged\nShows staged vs last commit\n\n\nCreate branch\ngit branch &lt;name&gt;\nCreates a new branch\n\n\nSwitch branch\ngit switch &lt;name&gt;\nSwitches to another branch\n\n\n\ngit switch -c &lt;name&gt;\nCreates and switches to a new branch\n\n\nMerge branches\ngit merge &lt;branch&gt;\nMerges specified branch into current branch\n\n\nDelete branch\ngit branch -d &lt;name&gt;\nDeletes a branch (safe)\n\n\n\ngit branch -D &lt;name&gt;\nForces deletion of a branch\n\n\nView branches\ngit branch\nLists all local branches\n\n\nTrack remote branch\ngit branch -u origin/&lt;branch&gt;\nSets upstream for local branch\n\n\nPush changes\ngit push\nUploads commits to remote (default branch)\n\n\n\ngit push origin &lt;branch&gt;\nPushes a specific branch to remote\n\n\nPull changes\ngit pull\nFetches + merges changes from remote into current branch\n\n\nFetch only\ngit fetch\nDownloads changes from remote but doesn’t merge\n\n\nCheck remotes\ngit remote -v\nLists configured remotes and URLs\n\n\nTag a commit\ngit tag &lt;name&gt;\nTags the current commit\n\n\n\ngit tag -a &lt;name&gt; -m \"&lt;msg&gt;\"\nAnnotated tag with message\n\n\nCheckout commit\ngit checkout &lt;commit&gt;\nSwitches to a specific commit (detached HEAD)\n\n\nStash changes\ngit stash\nTemporarily saves uncommitted changes\n\n\n\ngit stash apply\nReapplies stashed changes\n\n\nView staged files\ngit ls-files --stage\nShows what’s in the staging area",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>GitHub & Collaboration</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html",
    "href": "07-internet-fundamentals.html",
    "title": "APIs & Internet Fundamentals",
    "section": "",
    "text": "The Internet\nWhat is the internet?\n“A series of tubes” is a phrase coined originally as an analogy by then-United States Senator Ted Stevens (R-Alaska) to describe the Internet in the context of opposing network neutrality.[1] On June 28, 2006, he used this metaphor to criticize a proposed amendment to a committee bill. The amendment would have prohibited Internet Access providers such as AT&T, Comcast, Time Warner Cable, and Verizon Communications from charging fees to give some companies’ data a higher priority in relation to other traffic.”\nWhat is the internet, really???\nThe Internet is a global system of interconnected computers and devices that communicate using standardized protocols—primarily the Internet Protocol Suite (TCP/IP)—to share information and services. These devices form a vast network-of-networks, exchanging data over physical infrastructure such as fiber-optic cables, satellites, and wireless technologies.\nThe Internet is a decentralized system where independently operated networks agree to exchange data.\nThe internet is a global network of devices connected via cables (fiber, copper, etc.), satellites, or wireless systems. Devices that connect to the internet communicate with each other by exchanging data using various sets of rules called protocols. Each protocol governs how a specific type of communication is carried out. For example, sending an email uses the SMTP protocol, while loading a webpage in your browser typically uses HTTPS.\nTherefore, when you open Gmail in your browser and send an email, multiple protocols are at work: HTTPS is used to load the Gmail web interface and securely interact with it, while SMTP is used behind the scenes to transmit the email to the recipient’s mail server.\nEach protocol has it’s own rules simliar to the grammar rules of a language (e.g. verb tense, sentence structure).\nJust as using proper grammar helps people understand each other clearly and effectively, the rules of a given protocol ensure that devices can reliably exchange a given type of data (e.g. email).\nOne of the most important protocols on the modern internet is HyperText Transfer Protocol Secure (HTTPS), which smartphones and laptops use—typically through web browsers—to securely interact with websites.\nWe dive into some of the rules later in this chapter.\nFirst, we need a better understanding for the kinds of devices that get connected to the Internet. When we say device, we mean any of the following:",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#the-internet",
    "href": "07-internet-fundamentals.html#the-internet",
    "title": "APIs & Internet Fundamentals",
    "section": "",
    "text": "Client devices – such as smartphones, laptops, tablets, and desktop computers that request data or services from servers.\nServers – computers (physical or virtual) that host websites, applications, files, or other data, and respond to client requests.\nRouters and switches – networking hardware that directs traffic across the internet and within local networks.\nInternet of Things (IoT) devices – smart thermostats, cameras, watches, appliances, and other gadgets that send and receive data.\nData center infrastructure – large-scale systems including virtual machines and containerized environments that power cloud services.\nEdge devices – equipment like content delivery nodes or local caching servers that bring data closer to users for faster access.\n\n\nClient\n\n\nServer\nWhat happens when you type a URL into a browser (e.g. Chrome, Safari)?\nSay you type: https://www.example.com into your browser.\nThis triggers a sequence of events involving several systems:\nStep 1: DNS Lookup\nDNS (Domain Name System) is the internet’s phonebook. Imagine a look-up table where every text URL is matched to the the IP address (a number that uniquely identifies the device or server).\nYou typed www.example.com. Your device asks a DNS server: “What is the IP address of this domain?” The DNS server replies with something like: 93.184.216.34. Now your computer knows where to send the request.\nStep 2: HTTP/HTTPS Request Now that you know the server’s address:\nYour browser sends an HTTP (or HTTPS) request to the IP address. This request says: “Please send me the web page for / (the homepage) of www.example.com.” If it’s HTTPS, the request is encrypted, so no one in between can read it.\nHTTP(S) stands for HyperText Transfer Protocol (Secure). A “protocol” is simply a formal set of rules for how computers communicate. Think of it like a shared language or etiquette for machines. These rules define how a client (like your browser) and a server (like example.com) exchange requests and responses.\nStep 3: Client-Server Architecture\nYour device (the client) made the request. The server (at 93.184.216.34) receives it, processes it, and sends back the necessary files — HTML, CSS, JavaScript, images, etc. You can think of this like a waiter (client) asking the kitchen (server) for your order (website) and bringing it back to your table (browser).\nStep 4: Browser Renders the Page\nYour browser receives the code and files. It renders the webpage visually — drawing the layout, loading images, executing JavaScript, and displaying the site\nBelow is a code snippet that illustrates\n\n\nExercise 1\n\nimport socket\nimport requests\n\n# Step 1: DNS Lookup\ndomain = \"example.com\"\nprint(f\"Looking up IP address for: {domain}\")\nip_address = socket.gethostbyname(domain)\nprint(f\"IP address of {domain} is {ip_address}\")\n\n# Step 2: HTTP Request\nprint(f\"\\nSending HTTP GET request to {domain}...\")\nprint(f\"\\nThe response is printed below:\")\nresponse = requests.get(f\"http://{domain}\")\n\n# Step 3: Print Response\nprint(f\"\\nResponse Status Code: {response.status_code}\")\nprint(f\"\\nCode of 200 means things went as planned.\")\nprint(\"Response Headers:\")\nprint(response.headers)\n\nprint(\"\\nFirst 500 characters of the HTML:\")\nprint(response.text)\n\n# Step 4: Save response to an HTML file\nfilename = \"response.html\"\nwith open(filename, \"w\", encoding=\"utf-8\") as f:\n    f.write(response.text)\n\nprint(f\"\\nFull HTML response saved to {filename}.\")\nprint(f\"\\nOpen the HTML file in your browser.\")\n\n\n\n\n\n\n\nWhat are Response Status Code?\n\n\n\n\n\nHTTP response codes are standardized 3-digit numbers sent by a web server to indicate the outcome of a client’s request. They let the client know whether the request was successful, redirected, resulted in an error, or requires additional action.\nTwo of the most common codes you will encounter are 200 and 404.\n\n\n\n\n\n\n\n\n\nCode Category\nCode\nName\nDescription\n\n\n\n\n1xx Informational\n100\nContinue\nThe initial part of the request has been received, and the client should continue.\n\n\n\n101\nSwitching Protocols\nServer is switching protocols as requested (e.g., HTTP to WebSocket).\n\n\n2xx Success\n200\nOK\nThe request succeeded, and the response contains the requested data.\n\n\n\n201\nCreated\nA new resource was successfully created (e.g., after a POST request).\n\n\n\n202\nAccepted\nThe request has been received but not yet processed.\n\n\n\n204\nNo Content\nThe request was successful, but there is no content to return.\n\n\n3xx Redirection\n301\nMoved Permanently\nThe resource has permanently moved to a new URL.\n\n\n\n302\nFound\nThe resource is temporarily at a different URL.\n\n\n\n304\nNot Modified\nThe cached version is still valid; no need to resend data.\n\n\n4xx Client Errors\n400\nBad Request\nThe server couldn’t understand the request due to malformed syntax.\n\n\n\n401\nUnauthorized\nAuthentication is required or failed.\n\n\n\n403\nForbidden\nThe server understands the request but refuses to authorize it.\n\n\n\n404\nNot Found\nThe requested resource could not be found.\n\n\n\n405\nMethod Not Allowed\nThe HTTP method is not supported for this resource.\n\n\n5xx Server Errors\n500\nInternal Server Error\nA generic server error — something went wrong on the server.\n\n\n\n502\nBad Gateway\nThe server received an invalid response from an upstream server.\n\n\n\n503\nService Unavailable\nThe server is temporarily unavailable (e.g., overloaded or down for maintenance).\n\n\n\n504\nGateway Timeout\nThe upstream server failed to respond in time.\n\n\n\n\n\n\n\n\n\n\n\n\nWhat are Response Headers?\n\n\n\n\n\nHeaders are a core part of the HTTP protocol (i.e. the agreed upon rules of sending information across the internet). Headers take the form of key-value pairs which are sent between a client and server and carry metadata about the request or response (e.g. such as content type, caching rules, and encoding). Headers help browsers and servers understand how to handle the data being exchanged. Below is a description of the headers that were returned from the example above.\n\n\n\n\n\n\n\nHeader (key: value pair)\nMeaning\n\n\n\n\nAccept-Ranges: bytes\nThe server supports partial content downloads (e.g., resuming a download from a byte offset).\n\n\nContent-Type: text/html\nThe response body is HTML — browsers know to render it as a webpage.\n\n\nETag\nA unique ID (hash) representing this specific version of the file. Used for efficient caching.\n\n\nLast-Modified\nTimestamp of the last modification to the resource. Useful for cache validation.\n\n\nVary: Accept-Encoding\nIndicates that the response varies depending on how the client encodes requests (e.g., gzip).\n\n\nContent-Encoding: gzip\nThe response is compressed using gzip. The browser will decompress it automatically.\n\n\nContent-Length: 648\nSize of the response body in bytes after compression.\n\n\nCache-Control: max-age=3241\nTells the browser it can cache this resource for 3,241 seconds (~54 minutes).\n\n\nDate\nThe date and time when the response was generated by the server.\n\n\nConnection: keep-alive\nKeeps the TCP connection open for reuse, improving performance for multiple requests.\n\n\n\n\n\n\n\n\nHTTP/HTTPS\nEalier we said that a “protocol” is simply a formal set of rules for how computers communicate (exchange requests and responses). Let’s look at what some of those rules are.\nIn the HTTP protocol, the commands used to tell the server what action the client wants to perform are called HTTP methods (or sometimes “verbs”)\nThe HTTP protocol includes:\nRules for message structure (request/response format) Allowed methods (GET, POST, etc.) Status codes (200, 404, 500, etc.) Headers (metadata) Optional message body Rules for connection management (e.g., keep-alive)",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#what-is-the-internet",
    "href": "07-internet-fundamentals.html#what-is-the-internet",
    "title": "APIs & Internet Fundamentals",
    "section": "What IS the Internet?",
    "text": "What IS the Internet?\nThe internet is a global network of interconnected computers that communicate using standardized protocols. When you’re building digital products, you’re essentially building on top of this massive infrastructure.\nThink of it as three layers:\n\nPhysical layer: Cables, fiber optics, wireless signals, satellites\nNetwork layer: Routers, switches, and protocols that move data\n\nApplication layer: Websites, apps, and services — this is where your products live",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#key-infrastructure-components",
    "href": "07-internet-fundamentals.html#key-infrastructure-components",
    "title": "APIs & Internet Fundamentals",
    "section": "Key Infrastructure Components",
    "text": "Key Infrastructure Components\n\nInternet Service Providers (ISPs)\n\nTier 1: Backbone providers (AT&T, Verizon, Level 3)\nTier 2: Regional providers that buy from Tier 1\nTier 3: Local ISPs that serve consumers\n\nWhen users complain about slow loading, it’s often their ISP, not your app. This hierarchy affects how you think about hosting locations and performance expectations.\n\n\nData Centers & The Cloud\n\nMassive server farms around the world\nContent Delivery Networks (CDNs) — bring content closer to users\nEdge computing — processing data closer to where it’s generated\n\nModern apps distribute globally through CDNs and multiple regions. If AWS US-East goes down (and it does), your European users keep working. AI processing at the edge means lower latency for real-time features.",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#essential-protocols-technologies",
    "href": "07-internet-fundamentals.html#essential-protocols-technologies",
    "title": "APIs & Internet Fundamentals",
    "section": "Essential Protocols & Technologies",
    "text": "Essential Protocols & Technologies\n\nDNS (Domain Name System)\n\nWhat it does: Translates google.com → 142.250.190.78\nWhy it matters: Humans remember names, computers need numbers\nHow it works: Hierarchical system of DNS servers worldwide\n\nDNS is often the invisible bottleneck. Slow DNS makes your app feel slow even when your servers are blazing fast. Smart founders use multiple DNS providers and aggressive caching.\n\n\nIP Addresses & Routing\n\nIPv4: 192.168.1.1 (we’re running out of these)\nIPv6: 2001:0db8:85a3::8a2e:0370:7334 (the inevitable future)\nRouting: How data finds the best path across networks\n\nThe IPv4 shortage means higher hosting costs and eventual IPv6 migration. Geographic routing lets you serve users from the closest servers.\n\n\nTCP/IP Stack\n\nApplication Layer: HTTP, HTTPS, FTP, SMTP — your APIs live here\nTransport Layer: TCP (reliable) vs UDP (fast)\nInternet Layer: IP routing and addressing\nPhysical Layer: Actual cables and wireless signals\n\nHTTPS is no longer optional — it’s required for user trust, SEO, and modern browser features. Choose TCP for payments and critical data, UDP for gaming and real-time features where speed beats reliability.",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#watch-this-video-for-the-big-picture",
    "href": "07-internet-fundamentals.html#watch-this-video-for-the-big-picture",
    "title": "APIs & Internet Fundamentals",
    "section": "Watch this video for the big picture:",
    "text": "Watch this video for the big picture:",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#step-by-step-what-happens-when-you-visit-a-website",
    "href": "07-internet-fundamentals.html#step-by-step-what-happens-when-you-visit-a-website",
    "title": "APIs & Internet Fundamentals",
    "section": "Step-by-step: What happens when you visit a website",
    "text": "Step-by-step: What happens when you visit a website\n\nThe Journey of a Web Request\n\nYou type google.com into your browser\nDNS lookup: Your computer asks “What’s the IP address for google.com?”\n\nChecks local cache first\nAsks your ISP’s DNS server\nMay query root servers, then .com servers, then Google’s servers\n\nDNS response: Returns something like 142.250.190.78\nTCP handshake: Your computer establishes a reliable connection\n\nSYN: “Can we talk?”\nSYN-ACK: “Yes, let’s talk”\nACK: “Great, let’s start”\n\nHTTP request: Your browser sends a request http  GET / HTTP/1.1  Host: google.com  User-Agent: Mozilla/5.0...\nServer processing: Google’s server processes your request\nHTTP response: Server sends back HTML, CSS, JavaScript\nBrowser rendering: Your browser assembles and displays the page\nAdditional requests: Browser fetches images, stylesheets, scripts\n\n\n\nWhy This Matters for Developers\nUnderstanding this flow helps you: - Debug performance issues — where are the bottlenecks? - Optimize loading times — reduce DNS lookups, use CDNs - Handle errors gracefully — network timeouts, DNS failures - Design better APIs — minimize round trips, cache effectively",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#the-modern-internet-architecture",
    "href": "07-internet-fundamentals.html#the-modern-internet-architecture",
    "title": "APIs & Internet Fundamentals",
    "section": "The Modern Internet Architecture",
    "text": "The Modern Internet Architecture\n\nContent Delivery Networks (CDNs)\nInstead of everyone hitting one server, CDNs distribute content globally:\nUser in Tokyo → Tokyo CDN server (fast!)\nUser in London → London CDN server (fast!)\nUser in NYC → NYC CDN server (fast!)\nA user in Australia waiting 2 seconds for your US server vs. 0.2 seconds for a Sydney CDN server — that 10x difference shows up in conversion rates.\nPopular CDNs: Cloudflare (free tier), AWS CloudFront, Google Cloud CDN\n\n\nLoad Balancers\nDistribute traffic across multiple servers: - Round robin: Request 1 → Server A, Request 2 → Server B - Least connections: Send to server with fewest active connections - Geographic: Route based on user location\nWhen one server crashes, load balancers route to healthy ones. When traffic spikes, they distribute the load. Essential for anything beyond a side project.\n\n\nMicroservices & APIs\nModern apps aren’t monoliths — they’re collections of services:\nFrontend App → Authentication API\n            → User Profile API  \n            → Payment API\n            → Notification API\nThis architecture lets you scale what matters, gives teams independence, and makes debugging easier. Problem with payments? Check the payment service logs, not the entire application.",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#api-in-plain-english",
    "href": "07-internet-fundamentals.html#api-in-plain-english",
    "title": "APIs & Internet Fundamentals",
    "section": "API in plain English",
    "text": "API in plain English\nAPI = Application Programming Interface\nIt’s a set of rules for how software talks to other software.\nRestaurant analogy:\n- The API is the waiter\n- Your app is the customer\n- The kitchen is the server\n- The menu is what’s available via the API\nYour app sends a request → API delivers it → response comes back.\nInstead of building a payment processor from scratch, you use Stripe’s API. Instead of training your own AI model, you call OpenAI’s API. APIs let you focus on what makes your product unique while leveraging existing solutions for everything else.",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#when-youll-need-api-keys",
    "href": "07-internet-fundamentals.html#when-youll-need-api-keys",
    "title": "APIs & Internet Fundamentals",
    "section": "When you’ll need API keys",
    "text": "When you’ll need API keys\n\nOpenAI — for AI features\nZapier workflows — for automation\n\nFrontend to backend — your app’s internal communication\nStripe — for payments\nSendGrid — for emails\nAnalytics services — for tracking\n\nMost apps end up with 10+ API keys pretty quickly. Each one represents functionality you’re getting instantly instead of building over months.",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#example-request-header",
    "href": "07-internet-fundamentals.html#example-request-header",
    "title": "APIs & Internet Fundamentals",
    "section": "Example request header",
    "text": "Example request header\nAuthorization: Bearer sk-abc123",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#api-authentication-methods",
    "href": "07-internet-fundamentals.html#api-authentication-methods",
    "title": "APIs & Internet Fundamentals",
    "section": "API Authentication Methods",
    "text": "API Authentication Methods\nBeyond API keys, you’ll encounter these authentication methods:\n\nOAuth 2.0 — for accessing user data from platforms like Google, GitHub, Twitter\nJWT (JSON Web Tokens) — for stateless authentication in your own APIs\nBearer tokens — commonly used with AI services",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#api-security-basics",
    "href": "07-internet-fundamentals.html#api-security-basics",
    "title": "APIs & Internet Fundamentals",
    "section": "API Security Basics",
    "text": "API Security Basics\n\nNever hardcode API keys — use environment variables\nRotate keys regularly — especially if compromised\nUse HTTPS always — never send keys over HTTP\nRespect rate limits — avoid getting blocked",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#common-tools-youll-use",
    "href": "07-internet-fundamentals.html#common-tools-youll-use",
    "title": "APIs & Internet Fundamentals",
    "section": "Common tools you’ll use:",
    "text": "Common tools you’ll use:\n\nAI & ML APIs\n\nOpenAI API — GPT models for text generation, summarization, chat\nAnthropic Claude — advanced reasoning and analysis\nHugging Face — open-source models and transformers\nGoogle Cloud AI — vision, translation, speech recognition\n\n\n\nAutomation & Integration\n\nZapier — to automate tasks (like sending data to Slack or Sheets)\n\nWebhooks — real-time notifications when events happen\n\n\n\nData & Backend\n\nFirebase / Supabase — to store and manage your app’s data\n\nYour own custom API — to connect your app’s frontend to its backend logic\n\n\n\nPayments & Business\n\nStripe API — to handle payments, billing, and subscriptions",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#whats-a-chatgpt-wrapper",
    "href": "07-internet-fundamentals.html#whats-a-chatgpt-wrapper",
    "title": "APIs & Internet Fundamentals",
    "section": "What’s a “ChatGPT Wrapper”?",
    "text": "What’s a “ChatGPT Wrapper”?\nYou’ll hear this term a lot in startup circles. A ChatGPT wrapper is essentially an app that:\n\nTakes user input through a custom interface\nSends that input to OpenAI’s API behind the scenes\nFormats and presents the response in a specific way\nOften adds specialized prompts, context, or processing\n\nExamples of successful wrappers: - Copy.ai — marketing copy generation - Jasper — content writing for businesses\n- Notion AI — writing assistance within Notion - GitHub Copilot — code completion in your editor\nWhy wrappers work: - Specialized UI — better than ChatGPT’s generic interface for specific tasks - Custom prompts — pre-engineered for particular use cases - Integration — built into existing workflows - Branding — your product, not OpenAI’s\nThe business model: You pay OpenAI ~$0.002 per 1K tokens, charge users $20-50/month for unlimited access to your specialized interface.\n\nAutomate workflows with Zapier\nWhen new users sign up, auto-send welcome email + add to CRM + notify team in Slack\nProcess payments with Stripe\nCharge credit cards, manage subscriptions, send receipts, handle refunds\nBuild a backend API for your app\nLet your frontend make requests like GET /tasks or POST /user\nTrack everything with analytics APIs\nUser behavior, conversion rates, feature usage\nSend emails with SendGrid/Mailgun\nWelcome sequences, password resets, marketing campaigns",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#restful-api-conventions",
    "href": "07-internet-fundamentals.html#restful-api-conventions",
    "title": "APIs & Internet Fundamentals",
    "section": "RESTful API Conventions",
    "text": "RESTful API Conventions\nWhen building your own APIs, follow these patterns:\n\nGET /users — retrieve all users\nGET /users/123 — retrieve specific user\nPOST /users — create new user\nPUT /users/123 — update user\nDELETE /users/123 — delete user",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#error-handling",
    "href": "07-internet-fundamentals.html#error-handling",
    "title": "APIs & Internet Fundamentals",
    "section": "Error Handling",
    "text": "Error Handling\nYour API should return meaningful error codes:\n{\n  \"error\": \"User not found\",\n  \"code\": 404,\n  \"message\": \"No user exists with ID 123\"\n}",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#api-documentation",
    "href": "07-internet-fundamentals.html#api-documentation",
    "title": "APIs & Internet Fundamentals",
    "section": "API Documentation",
    "text": "API Documentation\nAlways document your APIs using tools like: - Swagger/OpenAPI — interactive documentation - Postman Collections — shareable API examples - ReadMe — beautiful documentation sites",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#security-privacy-best-practices",
    "href": "07-internet-fundamentals.html#security-privacy-best-practices",
    "title": "APIs & Internet Fundamentals",
    "section": "Security & Privacy Best Practices",
    "text": "Security & Privacy Best Practices\n\nSecret Key Management\n\nNever hardcode API keys — use environment variables (.env files)\nRotate keys regularly — especially if compromised\nUse different keys for different environments — dev, staging, production\nStore secrets securely — use services like AWS Secrets Manager, HashiCorp Vault\nAdd .env to .gitignore — never commit secrets to version control\n\n\n\nPrivacy & Data Protection\n\nMinimize data collection — only request what you actually need\nEncrypt data in transit — always use HTTPS/TLS\nEncrypt sensitive data at rest — especially user data, payment info\nImplement proper access controls — not everyone needs admin API keys\nLog carefully — never log API keys, passwords, or sensitive user data\nGDPR/CCPA compliance — understand data retention and deletion requirements\n\n\n\nAPI Communication Security\n\nUse HTTPS always — never send keys over HTTP\nValidate all inputs — prevent injection attacks\nImplement rate limiting — protect against abuse and DDoS\nUse API versioning — maintain backward compatibility\nMonitor API usage — detect unusual patterns or potential breaches\n\n\n\nWhen Things Go Wrong\n\nHave an incident response plan — what to do if keys are compromised\nMonitor for leaked secrets — tools like GitGuardian can scan your repos\nAudit API access regularly — who has access to what keys\nDocument your security practices — for compliance and team onboarding\n\nA leaked Stripe key means unauthorized charges. A compromised OpenAI key means someone burns through your AI budget. Poor privacy practices can lead to regulatory fines and lost user trust. Environment variable mistakes have cost founders thousands overnight.",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#build-your-first-ai-powered-api",
    "href": "07-internet-fundamentals.html#build-your-first-ai-powered-api",
    "title": "APIs & Internet Fundamentals",
    "section": "Build Your First AI-Powered API",
    "text": "Build Your First AI-Powered API\nGoal: Create a simple API that summarizes text using OpenAI\nWhy this exercise matters: This is the exact pattern you’ll use to build AI features into your product. Master this, and you can add AI to anything.\n\nStep 1: Set up your environment\nnpm init -y\nnpm install express openai dotenv\n\n\nStep 2: Create your API\n// server.js\nconst express = require('express');\nconst OpenAI = require('openai');\nrequire('dotenv').config();\n\nconst app = express();\napp.use(express.json());\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPENAI_API_KEY\n});\n\napp.post('/summarize', async (req, res) =&gt; {\n  try {\n    const { text } = req.body;\n    \n    const completion = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: [\n        {\n          role: \"user\",\n          content: `Summarize this text: ${text}`\n        }\n      ]\n    });\n    \n    res.json({\n      summary: completion.choices[0].message.content\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: \"Failed to summarize text\",\n      message: error.message\n    });\n  }\n});\n\napp.listen(3000, () =&gt; {\n  console.log('API running on port 3000');\n});\n\n\nStep 3: Test your API\ncurl -X POST http://localhost:3000/summarize \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"text\": \"Your long text here...\"}'",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#api-pricing-models",
    "href": "07-internet-fundamentals.html#api-pricing-models",
    "title": "APIs & Internet Fundamentals",
    "section": "API Pricing Models",
    "text": "API Pricing Models\n\nPer request — OpenAI charges per token\nMonthly subscription — Zapier has monthly limits\nUsage tiers — Stripe charges percentage + fixed fee",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#when-to-build-vs.-buy",
    "href": "07-internet-fundamentals.html#when-to-build-vs.-buy",
    "title": "APIs & Internet Fundamentals",
    "section": "When to Build vs. Buy",
    "text": "When to Build vs. Buy\nBuild your own API when: - You need custom business logic - You want full control over data - Third-party options are too expensive\nUse third-party APIs when: - The functionality already exists - It’s not core to your business - You need to move fast",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#rest-vs.-graphql",
    "href": "07-internet-fundamentals.html#rest-vs.-graphql",
    "title": "APIs & Internet Fundamentals",
    "section": "REST vs. GraphQL",
    "text": "REST vs. GraphQL\nREST (what we’ve covered): - Simple and widely supported - Good for CRUD operations - Easy to cache\nGraphQL: - Request exactly the data you need - Single endpoint for all operations - Better for complex, nested data",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#webhooks-real-time-apis",
    "href": "07-internet-fundamentals.html#webhooks-real-time-apis",
    "title": "APIs & Internet Fundamentals",
    "section": "Webhooks & Real-time APIs",
    "text": "Webhooks & Real-time APIs\nInstead of constantly asking “is there new data?”, webhooks push data to you:\n// Stripe webhook example\napp.post('/webhook/stripe', (req, res) =&gt; {\n  const event = req.body;\n  \n  if (event.type === 'payment_intent.succeeded') {\n    // User paid! Update your database\n    console.log('Payment received:', event.data.object);\n  }\n  \n  res.json({received: true});\n});",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#why-this-matters",
    "href": "07-internet-fundamentals.html#why-this-matters",
    "title": "APIs & Internet Fundamentals",
    "section": "Why this matters:",
    "text": "Why this matters:\nAPIs let you scale your product, connect tools, and automate workflows — without reinventing the wheel.\nUsing APIs well means: - Faster development — don’t rebuild what exists - Cleaner architecture — separate concerns properly - Lower engineering costs — leverage existing infrastructure - Better user experience — integrate best-in-class services",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "07-internet-fundamentals.html#key-takeaways-for-founders",
    "href": "07-internet-fundamentals.html#key-takeaways-for-founders",
    "title": "APIs & Internet Fundamentals",
    "section": "Key Takeaways for Founders",
    "text": "Key Takeaways for Founders\n\nStart with third-party APIs — build your MVP faster\nPlan for scale — understand pricing and rate limits\nDocument everything — your future self will thank you\nSecurity first — protect your keys and user data\nMonitor and optimize — track API costs and performance\n\nThese are mission-critical skills for anyone building or launching a tech product.",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>APIs & Internet Fundamentals</span>"
    ]
  },
  {
    "objectID": "08-software-engineering.html",
    "href": "08-software-engineering.html",
    "title": "SWE Principles",
    "section": "",
    "text": "Types of Digital Applications",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>SWE Principles</span>"
    ]
  },
  {
    "objectID": "08-software-engineering.html#types-of-digital-applications",
    "href": "08-software-engineering.html#types-of-digital-applications",
    "title": "SWE Principles",
    "section": "",
    "text": "1. System Software\nOperating systems, device drivers, and utilities that manage hardware and core system functions (e.g., Windows, Linux, macOS).\n\n\n2. Embedded Software\nRuns on specialized hardware such as IoT devices, vehicles, and appliances (e.g., firmware in smart thermostats or car infotainment systems).\n\n\n3. APIs and Microservices (Supporting Components)\nBackend services and interfaces that enable communication and integration between applications (e.g., Stripe API, AWS Lambda).\n\n\n4. Cloud-Based Applications / SaaS\nApplications accessed over the internet, often subscription-based and scalable (e.g., Salesforce, Zoom, Dropbox).\n\n\n5. Web Applications\nApps accessed via a browser, including: - Standard web apps – Gmail, Google Docs, Netflix. - Progressive Web Apps (PWAs) – Hybrid apps with offline support and installability (e.g., Twitter Lite).\n\n\n6. Desktop Applications\nInstalled software for personal computers (e.g., Photoshop, Microsoft Word, Spotify desktop).\n\n\n7. Mobile Applications\nNative or cross-platform apps for smartphones and tablets (e.g., Instagram, Uber, Duolingo).",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>SWE Principles</span>"
    ]
  },
  {
    "objectID": "08-software-engineering.html#introduction-thinking-like-a-software-engineer",
    "href": "08-software-engineering.html#introduction-thinking-like-a-software-engineer",
    "title": "SWE Principles",
    "section": "Introduction: Thinking like a Software Engineer",
    "text": "Introduction: Thinking like a Software Engineer\nWhat comes to mind when you think of software engineering? Most people immediately think of one thing–writing code. However, “writing code” does not fully encapsulate the work of a software engineer. At its core, software engineering is all about designing solutions to complex problems in a way that others can understand and improve upon over time. Whether you’re building a personal project or contributing to a larger application, you should always keep these four essential questions in mind:\n\nCan others understand my code? Will someone else (or future you) be able to read and modify this code easily?\nIs it scalable? As my user base grows, will my code still work efficiently?\nDoes it handle errors? When something goes wrong, does my code deal with it gracefully instead of crashing?\nDoes it work fast? Is my code efficient and doesn’t waste computer resources?\n\nUnderstanding the fundamentals of software engineering is essential to allow you to use AI to its fullest capacity. This chapter explores those fundamental ideas and best practices needed to write robust and maintainable code.",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>SWE Principles</span>"
    ]
  },
  {
    "objectID": "08-software-engineering.html#programming-basics",
    "href": "08-software-engineering.html#programming-basics",
    "title": "SWE Principles",
    "section": "Programming Basics",
    "text": "Programming Basics\n\nVariables, Functions, Conditionals, Loops\nThe building blocks of any program are variables, functions, conditionals, and loops. Below is a brief introduction to each programming concept, along with some practical examples:\n\n** About the Code Examples**\nIn the code examples throughout this chapter, we will use JavaScript with Next.js, a popular React framework for building modern web applications. Keep in mind though, any programming language will adhere to the same fundamental principles, though the syntax may vary.\n\nVariables store data in your program. Choose descriptive names that clearly indicate what the variable contains:\n// Good - Names clearly describe what the data represents\nconst userAge = 25;                    // Age of the user\nconst isAuthenticated = true;          // Whether user is logged in\nconst customerEmail = \"john@example.com\"; // User's email address\n\n// Poor - Unclear names that don't explain the data\nconst x = 25;        // What does x represent?\nconst flag = true;   // What is this flag for?\nconst data = \"john@example.com\"; // What kind of data?\nFunctions are reusable blocks of code that perform specific tasks. Good functions follow these principles:\n// This function has one clear job: calculate a price with tax and discount\n// It takes three inputs (parameters) and returns the final price\nfunction calculateTotalPrice(basePrice, taxRate, discountPercentage = 0) {\n    // First, apply the discount (if any)\n    const discountedPrice = basePrice * (1 - discountPercentage / 100);\n    \n    // Then, add tax to the discounted price\n    const totalWithTax = discountedPrice * (1 + taxRate);\n    \n    // Round to 2 decimal places for currency display\n    return Math.round(totalWithTax * 100) / 100;\n}\n\n// Usage example:\nconst finalPrice = calculateTotalPrice(100, 0.08, 10); // $100 base, 8% tax, 10% discount\nconsole.log(finalPrice); // Result: $97.20\nConditionals let your program make decisions based on different situations:\n// Check user's age and respond appropriately\nif (userAge &gt;= 18) {\n    console.log(\"User is an adult\");\n} else if (userAge &gt;= 13) {\n    console.log(\"User is a teenager\");\n} else {\n    console.log(\"User is a child\");\n}\n\n// This creates different behavior based on the userAge value\n// 25 → \"User is an adult\"\n// 16 → \"User is a teenager\" \n// 8 → \"User is a child\"\nLoops repeat actions efficiently instead of writing the same code multiple times:\n// For loop: when you know exactly how many times to repeat\nfor (let i = 0; i &lt; 5; i++) {\n    console.log(`Iteration ${i}`); // Prints: Iteration 0, Iteration 1, etc.\n}\n\n// While loop: when you repeat until a condition is met\nlet userInput = \"\";\nwhile (userInput !== \"quit\") {\n    userInput = prompt(\"Enter command (or 'quit' to exit): \");\n    processCommand(userInput);\n}\n// This keeps asking for input until the user types \"quit\"\n\n\nComponents in Next.js\nIn Next.js, components are like custom LEGO blocks for building websites. Each component is a piece of your website that can be reused and combined with other pieces.\nThink of a component like a recipe that describes: - What it looks like (the display) - What data it needs (like ingredients) - What it can do (like buttons that respond to clicks)\nLet’s look at a simple example - a counter component that can be used on any page:\n// components/Counter.js\nimport { useState } from 'react';\n\n// This is a Counter component - it's like creating a new type of element\nexport default function Counter() {\n    // This is \"state\" - data that can change over time\n    // We start counting at 0\n    const [count, setCount] = useState(0);\n    \n    // These are functions that change our count\n    const increase = () =&gt; {\n        setCount(count + 1); // Add 1 to current count\n    };\n    \n    const decrease = () =&gt; {\n        setCount(count - 1); // Subtract 1 from current count\n    };\n    \n    // This describes what appears on the screen\n    return (\n        &lt;div&gt;\n            &lt;h2&gt;Counter: {count}&lt;/h2&gt;\n            &lt;button onClick={increase}&gt;+&lt;/button&gt;\n            &lt;button onClick={decrease}&gt;-&lt;/button&gt;\n        &lt;/div&gt;\n    );\n}\nUsing the component in a Next.js App Router page:\n// app/page.js (Home page)\nimport Counter from '../components/Counter';\n\nexport default function HomePage() {\n    return (\n        &lt;div&gt;\n            &lt;h1&gt;Welcome to My App&lt;/h1&gt;\n            &lt;Counter /&gt;\n        &lt;/div&gt;\n    );\n}\nWhat’s happening here: 1. useState(0) creates a variable called count that starts at 0 2. setCount is how we change the value of count 3. When someone clicks the + button, count increases by 1 4. When someone clicks the - button, count decreases by 1 5. The screen automatically updates to show the new number 6. export default makes the component available to import in other files\nMaking components reusable with props:\n// components/UserCard.js\nexport default function UserCard({ name, age, email }) {\n    return (\n        &lt;div style={{ border: '1px solid #ccc', padding: '16px', margin: '8px' }}&gt;\n            &lt;h3&gt;{name}&lt;/h3&gt;\n            &lt;p&gt;Age: {age}&lt;/p&gt;\n            &lt;p&gt;Email: {email}&lt;/p&gt;\n        &lt;/div&gt;\n    );\n}\n\n// Usage in a page:\n// &lt;UserCard name=\"Alice\" age={25} email=\"alice@example.com\" /&gt;\n// &lt;UserCard name=\"Bob\" age={30} email=\"bob@example.com\" /&gt;\nNext.js App Router benefits: - File-based routing: Folders become routes, page.js files become pages - Layouts and templates: Shared UI components that wrap multiple pages - Built-in optimization: Images, fonts, and scripts are optimized automatically - Server and client components: Better performance with server-side rendering - API routes: Backend and frontend in the same project - Easy deployment: One command deploys your entire app",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>SWE Principles</span>"
    ]
  },
  {
    "objectID": "08-software-engineering.html#command-line-fundamentals",
    "href": "08-software-engineering.html#command-line-fundamentals",
    "title": "SWE Principles",
    "section": "Command Line Fundamentals",
    "text": "Command Line Fundamentals\nThe command line is your direct interface to the computer’s operating system. It’s faster than clicking through menus once you learn the basics.\n\nEssential Commands\ncd (Change Directory) - Navigate between folders:\ncd /path/to/your/project    # Go to a specific folder\ncd ..                       # Go up one level (to parent folder)\ncd ~                        # Go to your home directory\ncd -                        # Go back to the previous directory\nls (List) - See what’s in the current folder:\nls                          # Show files and folders\nls -la                      # Show detailed info including hidden files\nls *.py                     # Show only Python files\nmkdir (Make Directory) - Create new folders:\nmkdir new-project           # Create a single folder\nmkdir -p projects/web/app   # Create nested folders all at once\nAdditional Useful Commands:\npwd                         # Show current folder path\nrm filename                 # Delete a file\nrm -rf foldername          # Delete a folder and everything in it\ncp source destination       # Copy files\nmv source destination       # Move or rename files\n\n\nCommand Line Tips\n\nTab completion: Start typing a filename and press Tab to auto-complete\nUp arrow: Recalls your previous commands\nCtrl+C: Stops a running command\nman command: Shows the manual for any command (e.g., man ls)",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>SWE Principles</span>"
    ]
  },
  {
    "objectID": "08-software-engineering.html#project-setup-and-structure",
    "href": "08-software-engineering.html#project-setup-and-structure",
    "title": "SWE Principles",
    "section": "Project Setup and Structure",
    "text": "Project Setup and Structure\n\nHow to Create a New Project\nStarting with good organization prevents headaches later. Here’s the standard workflow:\n1. Create the project folder:\nmkdir my-awesome-project    # Create main folder\ncd my-awesome-project       # Enter the folder\n2. Set up version control:\ngit init                    # Initialize Git tracking\n3. Create basic structure:\nmkdir src                   # Source code goes here\nmkdir tests                 # Test files go here\nmkdir docs                  # Documentation goes here\ntouch README.md             # Project description file\ntouch .gitignore            # Files to ignore in Git\n4. Set up for Next.js:\n# Create a new Next.js project (recommended)\nnpx create-next-app@latest my-awesome-project\ncd my-awesome-project\n\n# Or manual setup (advanced users)\nnpm init -y\nnpm install next react react-dom\n\n\nFile Structure (One Class/Component per File)\nOrganize your code so each file has one main purpose. This makes finding and fixing code much easier. Below is an example of how you might organize your codebase:\nmy-nextjs-project/\n├── app/                   # App Router (Next.js 13+)\n│   ├── layout.js         # Root layout component\n│   ├── page.js           # Home page (/)\n│   ├── globals.css       # Global styles\n│   ├── login/            # Login page route\n│   │   └── page.js       # Login page (/login)\n│   ├── products/         # Products route group\n│   │   ├── page.js       # Products list (/products)\n│   │   └── [id]/         # Dynamic route\n│   │       └── page.js   # Individual product (/products/123)\n│   └── api/              # API routes (backend)\n│       ├── users/        # /api/users endpoint\n│       │   └── route.js  # API handler\n│       └── orders/       # /api/orders endpoint\n│           └── route.js  # API handler\n├── components/           # Reusable UI components\n│   ├── User.js          # User component\n│   ├── Product.js       # Product component\n│   └── Order.js         # Order component\n├── lib/                 # Business logic and utilities\n│   ├── userService.js   # User-related operations\n│   ├── emailService.js  # Email functionality\n│   ├── paymentService.js # Payment processing\n│   └── utils.js         # General helper functions\n├── styles/              # Additional CSS files\n│   └── components.css   # Component-specific styles\n├── public/              # Static files\n│   ├── favicon.ico      # Website icon\n│   └── images/          # Image assets\n├── __tests__/           # Test files\n│   ├── components/      # Component tests\n│   │   └── User.test.js\n│   ├── app/            # Page tests\n│   │   └── page.test.js\n│   └── lib/            # Service tests\n│       └── userService.test.js\n├── README.md            # Project documentation\n├── package.json         # Dependencies and scripts\n├── next.config.js       # Next.js configuration\n└── .gitignore          # Files to ignore in version control\nWhy this file structure works: - Clear separation: Components, logic, and styles are organized separately - Easy navigation: Need user functionality? Look in User.js or userService.js - Prevents conflicts: Team members can work on different files without interfering - Easier testing: Test files directly correspond to source files",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>SWE Principles</span>"
    ]
  },
  {
    "objectID": "08-software-engineering.html#running-your-project-locally",
    "href": "08-software-engineering.html#running-your-project-locally",
    "title": "SWE Principles",
    "section": "Running Your Project Locally",
    "text": "Running Your Project Locally\n\nLocalhost\nLocalhost is your computer pretending to be a web server. It lets you test your website before publishing it to the internet.\nStarting your local Next.js server:\n# For Next.js projects:\nnpm run dev                 # Starts Next.js development server on port 3000\n\n# For production build testing:\nnpm run build               # Build the app for production\nnpm start                   # Start production server\n\n# For static export:\nnpm run build && npm run export  # Generate static files\nWhat happens when you run npm run dev: 1. The Next.js development server starts 2. Your browser opens to http://localhost:3000 3. You can see your app running locally 4. Changes you make automatically refresh the page (Hot Reload) 5. API routes are available at http://localhost:3000/api/...\nLocal Development Tips: - Use environment variables for settings (database URLs, API keys) - Keep local and production environments similar - Use different ports for different services to avoid conflicts",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>SWE Principles</span>"
    ]
  },
  {
    "objectID": "08-software-engineering.html#version-control-with-git",
    "href": "08-software-engineering.html#version-control-with-git",
    "title": "SWE Principles",
    "section": "Version Control with Git",
    "text": "Version Control with Git\nGit tracks changes to your code over time, like a detailed history of your project. It lets you experiment safely and collaborate with others. Learning to use version control is a crucial part of managing any software project. See the following video for a brief introduction to git:\nhttps://www.youtube.com/watch?v=r8jQ9hVA2qs\nSee the Github and Collaboration chapter for more detailed information on using Git and Github.",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>SWE Principles</span>"
    ]
  },
  {
    "objectID": "08-software-engineering.html#debugging-and-error-handling",
    "href": "08-software-engineering.html#debugging-and-error-handling",
    "title": "SWE Principles",
    "section": "Debugging and Error Handling",
    "text": "Debugging and Error Handling\n\nHow to Handle Errors\nGood programs expect things to go wrong and handle problems gracefully instead of crashing.\nTry-catch blocks handle errors that might occur:\n// This function tries to do something risky and handles problems\nfunction processUserData(userData) {\n    try {\n        // This might fail if userData is invalid\n        const result = parseUserInput(userData);\n        const processedData = transformData(result);\n        return processedData;\n        \n    } catch (error) {\n        // Handle specific types of errors differently\n        if (error instanceof ValidationError) {\n            console.error(`User input invalid: ${error.message}`);\n            return null; // Return safe default\n        } else {\n            console.error(`Unexpected error: ${error.message}`);\n            throw error; // Re-throw unknown errors\n        }\n        \n    } finally {\n        // This code runs whether success or failure\n        cleanupTempFiles();\n    }\n}\nInput validation checks data before using it:\nfunction processUserAge(ageInput) {\n    // Convert input to number\n    const age = parseInt(ageInput);\n    \n    // Check if it's a valid age\n    if (isNaN(age)) {\n        throw new Error(\"Age must be a number\");\n    }\n    if (age &lt; 0 || age &gt; 150) {\n        throw new Error(\"Age must be between 0 and 150\");\n    }\n    \n    return age;\n}\n\n// Usage with error handling:\ntry {\n    const userAge = processUserAge(\"25\");  // Valid\n    console.log(`User is ${userAge} years old`);\n} catch (error) {\n    console.error(`Invalid age: ${error.message}`);\n}\nGraceful degradation provides backups when things fail:\nasync function getUserProfilePicture(userId) {\n    try {\n        // Try to get image from fast CDN first\n        return await fetchFromCDN(userId);\n    } catch (cdnError) {\n        try {\n            // CDN failed, try backup storage\n            return await fetchFromBackupStorage(userId);\n        } catch (backupError) {\n            // Both failed, return default image\n            return getDefaultAvatar();\n        }\n    }\n}\n\n\nSetting Up Your Debugger\nDebuggers let you pause your program and inspect what’s happening step by step.\nVS Code setup: 1. Press Ctrl+Shift+D (Run and Debug view) 2. Click “create a launch.json file” 3. Choose your language (JavaScript, Python, etc.) 4. VS Code creates a configuration file for debugging\nBrowser Developer Tools: - Press F12 to open - Console tab: See error messages and run JavaScript commands - Sources tab: Set breakpoints and step through code - Network tab: See API calls and responses\n\n\nSetting Breakpoints\nBreakpoints pause your program so you can examine the current state.\nIn your code (JavaScript):\nfunction calculateTotal(items) {\n    let total = 0;\n    \n    debugger; // Program pauses here when debugger is open\n    \n    for (let item of items) {\n        total += item.price;\n        console.log(`Added ${item.name}: $${item.price}, total: $${total}`);\n    }\n    \n    return total;\n}\nIn your IDE: - Click in the left margin next to line numbers - Red dot = active breakpoint (program will pause here) - Gray dot = disabled breakpoint\n\n\nInspecting Your Changes\nWhen your program is paused at a breakpoint, you can:\n\nView variables: See current values of all variables in scope\nStep through code: Execute one line at a time to see what happens\nCall stack: See the chain of function calls that led to this point\nConsole commands: Type commands to test things in the current context\n\nDebugging workflow: 1. Reproduce the bug: Make it happen consistently 2. Add breakpoints: At the start of the problematic function 3. Run with debugger: Step through line by line 4. Check your assumptions: Are variables what you expect? 5. Find the problem: Where does the code do something unexpected? 6. Fix and test: Make the change and verify it works",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>SWE Principles</span>"
    ]
  },
  {
    "objectID": "08-software-engineering.html#design-principles",
    "href": "08-software-engineering.html#design-principles",
    "title": "SWE Principles",
    "section": "Design Principles",
    "text": "Design Principles\n\nDRY (Don’t Repeat Yourself)\nDRY means each piece of knowledge in your system should exist in exactly one place. When you copy and paste code, you create maintenance problems.\nBad example (lots of repetition):\n// Three similar functions with duplicated logic\nfunction calculateStudentPrice(basePrice) {\n    return basePrice * 0.9; // 10% discount\n}\n\nfunction calculateSeniorPrice(basePrice) {\n    return basePrice * 0.85; // 15% discount  \n}\n\nfunction calculateMilitaryPrice(basePrice) {\n    return basePrice * 0.8; // 20% discount\n}\nProblem: If you need to change how discounts work, you have to update three places. Easy to miss one and create bugs.\nGood example (DRY approach):\n// One function handles all discount types\nconst DISCOUNT_RATES = {\n    student: 0.10,\n    senior: 0.15,\n    military: 0.20,\n    regular: 0.00\n};\n\nfunction calculateDiscountedPrice(basePrice, customerType) {\n    const discountRate = DISCOUNT_RATES[customerType] || 0;\n    return basePrice * (1 - discountRate);\n}\n\n// Usage examples:\nconst studentPrice = calculateDiscountedPrice(100, 'student');   // $90\nconst seniorPrice = calculateDiscountedPrice(100, 'senior');     // $85\nconst regularPrice = calculateDiscountedPrice(100, 'regular');   // $100\nBenefits: One place to update discount logic, easy to add new customer types, less chance for bugs.\n\n\nCommit Often and Frequently\nRegular git commits create a detailed project history and make it easy to track down when bugs were introduced.\nCommit frequency guidelines: - Too frequent: Every line change (clutters history) - Too infrequent: Once per week (hard to track down problems) - Just right: Complete logical units of work (features, bug fixes, improvements)\nWhat makes a good commit: - Atomic: Contains one complete change - Working: Code compiles and tests pass - Descriptive: Message clearly explains what changed\n\n\nDocumentation\nGood documentation saves time for everyone who works with your code, including future you.\nFunction documentation example:\n/**\n * Calculates compound interest on an investment.\n * \n * @param {number} principal - Starting amount of money ($)\n * @param {number} rate - Annual interest rate (as decimal: 0.05 = 5%)\n * @param {number} time - Number of years to invest\n * @param {number} [compoundsPerYear=1] - How often interest compounds (optional, defaults to 1)\n * @returns {number} Final amount after compound interest\n * \n * @example\n * // $1000 invested for 2 years at 5% annual rate, compounded quarterly\n * const result = calculateCompoundInterest(1000, 0.05, 2, 4);\n * console.log(result); // 1103.81\n */\nfunction calculateCompoundInterest(principal, rate, time, compoundsPerYear = 1) {\n    return principal * Math.pow((1 + rate / compoundsPerYear), (compoundsPerYear * time));\n}\nTypes of documentation: - Inline comments: Explain complex or non-obvious code - Function docs: Purpose, parameters, return values, examples - README files: Project overview, setup instructions, how to use - API docs: For interfaces other developers will use\nWhen to document: - Complex algorithms or business logic - Functions that others will use - Unusual or non-standard approaches - Setup and configuration steps\n\n\nSimple is Better than Complex\nSimplicity makes code easier to understand, debug, and maintain. Always choose the simpler solution when it works just as well.\nComplex approach (hard to understand):\n// What does this function do? Hard to tell at a glance.\nfunction f(x, y, z = null) {\n    return !z ? x : z &lt; 0 ? y : z &gt; 0 ? x + y : x * y;\n}\nSimple approach (clear intent):\nfunction calculatePrice(basePrice, extraFee, operation = null) {\n    // No operation specified: return base price\n    if (operation === null) {\n        return basePrice;\n    }\n    \n    // Negative operation: return just the extra fee\n    if (operation &lt; 0) {\n        return extraFee;\n    }\n    \n    // Positive operation: add base price and extra fee\n    if (operation &gt; 0) {\n        return basePrice + extraFee;\n    }\n    \n    // Zero operation: multiply base price by extra fee\n    return basePrice * extraFee;\n}\nStrategies for simplicity: - Descriptive names: calculateUserAge() instead of calc() - Small functions: Each function does one clear thing - Avoid clever tricks: Code should be obvious, not impressive - Standard patterns: Use common approaches rather than inventing new ones",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>SWE Principles</span>"
    ]
  },
  {
    "objectID": "08-software-engineering.html#a-note-on-ai",
    "href": "08-software-engineering.html#a-note-on-ai",
    "title": "SWE Principles",
    "section": "A Note on AI",
    "text": "A Note on AI\nAI tools like ChatGPT and GitHub Copilot can significantly speed up development, but they need careful oversight to maintain code quality.\nAI strengths: - Generates boilerplate code quickly - Follows established patterns - Explains complex concepts\n- Suggests solutions to common problems - Creates initial test cases\nAI limitations and how to handle them:\n1. Code duplication - AI often repeats similar code:\n// AI might generate repetitive functions:\nfunction validateEmail(email) { /* validation code */ }\nfunction validatePassword(pass) { /* similar validation code */ }\nfunction validateUsername(user) { /* similar validation code */ }\n\n// You should refactor to:\nfunction validateInput(input, type) { /* unified validation */ }\n2. Missing context - AI doesn’t understand your specific codebase:\n// AI suggestion might ignore your existing utilities:\nfunction formatDate(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleDateString();\n}\n\n// But you already have: utils/dateHelper.js with formatDate()\n// Better to use existing code for consistency\n3. Security issues - Always review for vulnerabilities:\n// AI might suggest unsafe patterns:\nfunction getUserData(userId) {\n    const query = `SELECT * FROM users WHERE id = ${userId}`; // SQL injection risk!\n    return database.query(query);\n}\n\n// Always use parameterized queries:\nfunction getUserData(userId) {\n    const query = 'SELECT * FROM users WHERE id = ?';\n    return database.query(query, [userId]);\n}\nBest practices with AI:\n\nAlways review generated code - Treat it as a first draft, not final solution\nAsk follow-up questions: “Can this be simplified?” or “Is this redundant with existing code?”\nTest thoroughly - AI code may not handle edge cases\nCheck for patterns - Ensure consistency with your existing codebase\nValidate security - Review for common vulnerabilities\n\nExample AI workflow:\nYou: \"Create a function to validate user registration data\"\nAI: [generates code]\nYou: \"Please check if this duplicates any existing validation in my codebase\"\nAI: [reviews and suggests using existing validators]\nYou: \"Add error handling and tests for edge cases\"\nAI: [improves the code with proper error handling]\nRemember: AI is a powerful assistant that can make you more productive, but it cannot replace good engineering judgment. Use it to augment your skills, not replace your thinking.\n\nBy following these principles and practices, you’ll develop the mindset and skills necessary to write high-quality code. Remember that becoming proficient takes time and practice, so be patient with yourself as you learn and apply these concepts in your own projects.",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>SWE Principles</span>"
    ]
  },
  {
    "objectID": "09-ai-dev-platforms.html",
    "href": "09-ai-dev-platforms.html",
    "title": "AI Dev Tools",
    "section": "",
    "text": "Cursor and Windsurf",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>AI Dev Tools</span>"
    ]
  },
  {
    "objectID": "09-ai-dev-platforms.html#claude-code",
    "href": "09-ai-dev-platforms.html#claude-code",
    "title": "AI Dev Tools",
    "section": "Claude Code",
    "text": "Claude Code\n\nClaude Code: A Highly Agentic Coding Assistant",
    "crumbs": [
      "Topics",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>AI Dev Tools</span>"
    ]
  },
  {
    "objectID": "97-resources.html",
    "href": "97-resources.html",
    "title": "Resources",
    "section": "",
    "text": "Thought Leaders\nAakash Gupta\nLinkedIn, X, YouTube\nColin Matthews\nLinkedIn\nLenny Rachitsky\nSubstack\nPaweł Huryn\nDan Olsen\nMarty Cagan\nMelissa Perri\nX\nShreyas Doshi\nTeresa Torres\nGibson Biddle\nX",
    "crumbs": [
      "Resources",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "97-resources.html#interview-preparation",
    "href": "97-resources.html#interview-preparation",
    "title": "Resources",
    "section": "Interview Preparation",
    "text": "Interview Preparation\n\nProduct Manager interview simulator\nHow top tech companies interview product managers",
    "crumbs": [
      "Resources",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "97-resources.html#bookmarks",
    "href": "97-resources.html#bookmarks",
    "title": "Resources",
    "section": "Bookmarks",
    "text": "Bookmarks\n\nAI for PMs Roadmap",
    "crumbs": [
      "Resources",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "97-resources.html#ai-workflows",
    "href": "97-resources.html#ai-workflows",
    "title": "Resources",
    "section": "AI Workflows",
    "text": "AI Workflows\n\n\n\n\n\n\nCursor Workflow\n\n\n\n\n\nStanislav Beliaev CTO of GetFluently.App\nHow to make Cursor 10x more useful with this one system 👇\nAt Fluently (AI English Coach → https://getfluently.app) we use Cursor to streamline our development process.\nBy following these proven practices, you can ship features in hours, not days.\n→ Before using Cursor:\n• Ask Claude (or ChatGPT) to create a clear, detailed plan in markdown • Have the AI ask clarifying questions, critique its own plan, and regenerate if needed • Save this plan as “instructions. md” for easy reference during development. • Use ChatGPT to add an extra planning layer before coding by another AI, reducing errors and complexity.\n→ Workflow and incremental development:\nBreak work into small, manageable tasks or feature increments.\nUse an Edit-Test loop: 1. Write a failing test case first (TDD approach). 2. Instruct AI to write code to pass the test. 3. Run the test. 4. If it fails, AI analyzes failure and fixes code. 5. Repeat until tests pass.\nReview AI-generated changes after tests pass. Encourage AI to explain its chain of thought in prompts.\n→ Debugging\n• If stuck, ask Cursor to generate a detailed report of all files and their roles, including errors. • Use ChatGPT or Claude to analyze the report and suggest fixes. • Use tools like gitingest.com to collect all scripts, configs, and relevant files in a single page for easier AI ingestion. • Refer to the latest documentation via context7.com for up-to-date info.\n→ Cursor-specific tips\n• Use CursorRules to set broad project rules (always in AI context). Search Cursor Directory for examples. • Typical rule: Write tests → write code → run tests → update code until tests pass. • Use /Reference open editors to quickly add files to AI context. • Use cursorignore to exclude irrelevant files. • Keep context short by explicitly adding files via @. Longer context can confuse AI. • Start new chats when the context becomes too long. • Resync or reindex code frequently to keep AI up to date. • Notepads are useful for frequently used prompts.\n→ Version control and file management\n• Use Git often to commit changes regularly. • Avoid large sets of uncommitted changes. • Creating files and folders (e.g., touch, mkdir) is always acceptable. • Running tests (Vitest, PM test, NR test, build, tsc) is always allowed.\n→ Optional settings and modes\nEnable YOLO mode to have AI write tests automatically.\nUse a system prompt in “Rules for AI” in Cursor settings: • Keep answers concise and direct. • Suggest alternative solutions. • Avoid unnecessary explanations. • Prioritize technical details over generic advice.",
    "crumbs": [
      "Resources",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "97-resources.html#references",
    "href": "97-resources.html#references",
    "title": "Resources",
    "section": "References",
    "text": "References\nHow To Get The Most Out Of Vibe Coding, Y Combinator Startup School\nAll about pivoting, Y Combinator Startup School",
    "crumbs": [
      "Resources",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Resources</span>"
    ]
  },
  {
    "objectID": "98-tools.html",
    "href": "98-tools.html",
    "title": "AI Tools Overview",
    "section": "",
    "text": "Front end\nStitch by Google",
    "crumbs": [
      "Resources",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>AI Tools Overview</span>"
    ]
  },
  {
    "objectID": "98-tools.html#backend",
    "href": "98-tools.html#backend",
    "title": "AI Tools Overview",
    "section": "Backend",
    "text": "Backend\n\nSupabase",
    "crumbs": [
      "Resources",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>AI Tools Overview</span>"
    ]
  },
  {
    "objectID": "98-tools.html#no-code",
    "href": "98-tools.html#no-code",
    "title": "AI Tools Overview",
    "section": "No-Code",
    "text": "No-Code\n\nLovable\n\n\n\nV0",
    "crumbs": [
      "Resources",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>AI Tools Overview</span>"
    ]
  },
  {
    "objectID": "98-tools.html#low-code",
    "href": "98-tools.html#low-code",
    "title": "AI Tools Overview",
    "section": "Low-Code",
    "text": "Low-Code",
    "crumbs": [
      "Resources",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>AI Tools Overview</span>"
    ]
  },
  {
    "objectID": "98-tools.html#pro-code",
    "href": "98-tools.html#pro-code",
    "title": "AI Tools Overview",
    "section": "Pro-Code",
    "text": "Pro-Code\n\nWindsurf\n\n\n\nCursor\n\n\nVS Code",
    "crumbs": [
      "Resources",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>AI Tools Overview</span>"
    ]
  },
  {
    "objectID": "98-tools.html#presentations",
    "href": "98-tools.html#presentations",
    "title": "AI Tools Overview",
    "section": "Presentations",
    "text": "Presentations\n\nGamma",
    "crumbs": [
      "Resources",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>AI Tools Overview</span>"
    ]
  },
  {
    "objectID": "98-tools.html#chatbots",
    "href": "98-tools.html#chatbots",
    "title": "AI Tools Overview",
    "section": "ChatBots",
    "text": "ChatBots\n\nChatGPT\nGemini\nClaude\nPerplexity\nDeepSeek\nGrok",
    "crumbs": [
      "Resources",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>AI Tools Overview</span>"
    ]
  },
  {
    "objectID": "99-prompts.html",
    "href": "99-prompts.html",
    "title": "Prompt Library",
    "section": "",
    "text": "Architecture\nOpen ChatGPT (4o, not o1/o3/o4) and say:\n“ I’m building a [description of your product - the more detailed the better]. Use Next.js for frontend, Supabase for DB + auth.\nGive me the full architecture:\nFormat this entire document in markdown.”\nSave its output as architecture.md and throw it in an empty folder where your project will live.",
    "crumbs": [
      "Resources",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Prompt Library</span>"
    ]
  },
  {
    "objectID": "99-prompts.html#architecture",
    "href": "99-prompts.html#architecture",
    "title": "Prompt Library",
    "section": "",
    "text": "File + folder structure\nWhat each part does\nWhere state lives, how services connect",
    "crumbs": [
      "Resources",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Prompt Library</span>"
    ]
  },
  {
    "objectID": "99-prompts.html#tasks",
    "href": "99-prompts.html#tasks",
    "title": "Prompt Library",
    "section": "Tasks",
    "text": "Tasks\n“ Using that architecture, write a granular step-by-step plan to build the MVP. Each task should:\n\nBe incredibly small + testable\nHave a clear start + end\nFocus on one concern\n\nI’ll be passing this off to an engineering LLM that will be told to complete one task at a time, allowing me to test in between. ”\nSave it as tasks.md. Again, throw it in the folder.",
    "crumbs": [
      "Resources",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Prompt Library</span>"
    ]
  },
  {
    "objectID": "99-prompts.html#engineering",
    "href": "99-prompts.html#engineering",
    "title": "Prompt Library",
    "section": "Engineering",
    "text": "Engineering\nStep 3: In Cursor/Windsurf\n“ You’re an engineer building this codebase.\nYou’ve been given architecture.md and tasks.md.\n\nRead both carefully. There should be no ambiguity about what we’re building.\nFollow http://tasks.md and complete one task at a time.\nAfter each task, stop. I’ll test it. If it works, commit to GitHub and move to the next. ”\n\nInclude this as well - this is crucial:\nCODING PROTOCOL\n” Coding Instructions\n\nWrite the absolute minimum code required\nNo sweeping changes\nNo unrelated edits - focus on just the task you’re on\nMake code precise, modular, testable\nDon’t break existing functionality\nIf I need to do anything (e.g. Supabase/AWS config), tell me clearly ”\n\nThis system fixes the biggest problem with vibe coding:\nYou’re not dumping everything into the IDE and praying. You’re giving it a roadmap. You’re keeping it on rails. You stay in control.\nThis workflow lets you ship clean, testable AI-assisted code - without the spiral.\nNormally I’d ask you to follow me for the playbook but this is literally it. Good luck\nSource: vasumanmoza on X\n\n\n\n\n\n\nIcons\n\n\n\n\n\nAirBnB-style icons with ChatGPT-4o in 60 seconds 👇\nI used just ONE simple prompt to create 3D isometric illustrations that feel like Pixar vibes mixed with modern, minimal design.\nUse this prompt:\n–\nGenerate [ Your Concept ] icon with this JSON style:\n{  \n  \"icon_style\": {  \n    \"perspective\": \"isometric\",  \n    \n    \"geometry\": {  \n      \"proportions\": \"1:1 ratio canvas, with objects fitting comfortably within margins\",  \n      \"element_arrangement\": \"central dominant object, with supporting elements symmetrically or diagonally placed\"  \n    },  \n    \n    \"composition\": {  \n      \"element_count\": \"2–4 main objects\",  \n      \"spatial_depth\": \"layered to create sense of dimension and slight elevation\",  \n      \"scale_consistency\": \"uniform object scale across icon set\",  \n      \"scene_density\": \"minimal to moderate, maintaining clarity and visual focus\"  \n    },  \n    \n    \"lighting\": {  \n      \"type\": \"soft ambient light\",  \n      \"light_source\": \"subtle top-right or front-top direction\",  \n      \"shadow\": \"gentle drop shadows below and behind objects\",  \n      \"highlighting\": \"mild edge illumination to define forms\"  \n    },  \n    \n    \"textures\": {  \n      \"material_finish\": \"semi-matte to satin surfaces\",  \n      \"surface_treatment\": \"smooth with light tactile variation (e.g., wood grain, soft textures)\",  \n      \"texture_realism\": \"stylized naturalism without hyper-realistic noise\"  \n    },  \n    \n    \"render_quality\": {  \n      \"resolution\": \"high-resolution octane 3D rendering\",  \n      \"edge_definition\": \"crisp, no outlines; separation achieved via lighting and depth\",  \n      \"visual_clarity\": \"clean, readable shapes with minimal clutter\"  \n    },  \n    \n    \"color_palette\": {  \n      \"tone\": \"naturalistic with slight saturation boost\",  \n      \"range\": \"harmonious muted tones with gentle contrast\",  \n      \"usage\": \"distinct colors per object to improve identification and readability\"  \n    },  \n    \n    \"background\": {  \n      \"color\": \"hashtag#FFFFFF\",  \n      \"style\": \"pure white, flat\",  \n      \"texture\": \"none\"  \n    },  \n    \n    \"stylistic_tone\": \"premium, friendly, clean with lifestyle or service-oriented appeal\",  \n    \n    \"icon_behavior\": {  \n      \"branding_alignment\": \"neutral enough for broad applications\",  \n      \"scalability\": \"legible at small and medium sizes\",  \n      \"interchangeability\": \"part of a cohesive icon system with interchangeable subject matter\"  \n    }  \n  }  \n}\n–\nJust swap [ Your Concept ] with what you want: • “coffee shop” • “bike rental” • “co-working space”\nAnd just like that, high-end, Airbnb-style icons are ready in seconds. This might be the easiest design cheat code of 2025.",
    "crumbs": [
      "Resources",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Prompt Library</span>"
    ]
  }
]