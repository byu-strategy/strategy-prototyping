---
title: "Product Management Activities"
---

The day-to-day responsibilities of different product managers can vary widely due to differences in organizational size. In smaller companies and startups, product managers usually act as full-stack PMs, taking on a broad set of responsibilities that can include customer research, defining product strategy, writing requirements, creating prototypes, tracking metrics, and even handling marketing or sales support. 

By contrast, in larger organizations, roles tend to become much more specialized. Activities such as user research, data analysis, product design, or technical specification may be owned by separate functions (e.g. data scientists, designers, or technical product managers) allowing a PM to focus more narrowly on business strategy while still collaborating closely with specialized colleagues.

This reality helps explain the ongoing debate about how important technical skills are for product managers. In some companies, strong technical expertise is absolutely essential, while in others a PM can succeed without deep technical knowledge.

As should be clear from the prior chapters, our goal in this class is for you to develop the full-stack product management toolkit, one that includes technical skills as well as the latest AI-driven advances shaping product management activities.

The the primary activities of a product manager are shown in the table below along with how they can be separated across various roles in larger organizations.

This chapter focuses on the activities that are **bolded** in the chart. The remaining activities are discussed in other chapters. 

![PM and adjacent roles](images/pm-activities.png)

## Agile

Agile is term that describes a philosophy of managing work that emphasizes flexibility, collaboration, and delivering value quickly. Instead of long, rigid project plans (the "water-fall" approach), Agile teams work in short cycles, learn from feedback, and adjust as they go.

These principles were first articulated in 2001, "at Snowbird ski resort in the Wasatch mountains of Utah, [where] seventeen people met to talk, ski, relax, and try to find common ground..." The principles were codified as the [Manifesto for Agile Software Development](https://agilemanifesto.org/).

### Ceremonies

Agile frameworks include regular team meetings (sometimes called ceremonies) to keep work organized and communication clear:

- **Sprint Planning** – Decide what the team will work on in the next sprint.
- **Daily Stand-up** – A quick, daily check-in to share progress and obstacles.
- **Sprint Review** – Show completed work to stakeholders and get feedback.
- **Sprint Retrospective** – Reflect on what went well and what could improve.

Attendees at these meetings can vary based on the size of the organization and specialization of roles, but the product manager is generally present along with the development team, the Scrum Master (or Agile coach), and, in the case of Sprint Reviews, relevant stakeholders.

In the sprint planning meeting, the team decides which *user stories* will be worked on in the upcoming sprint.

A **user story** describes features from the perspective of the person who will use them. A common format is:

- As a **[type of user]**, I want **[goal]** so that **[reason/benefit]**.

Example:

- As a **customer**, I want **to reset my password** so that **I can access my account if I forget it**.

### Scrum and Kanban

Scrum and Kanban are the names for two different approaches that are both considered Agile ways of working. 

- **Scrum** – Work is organized into fixed-length sprints (usually 1–4 weeks) with defined roles like Product Owner, Scrum Master, and Development Team. Scrum originated in the 1980s from product development research. 
- **Kanban** – Focuses on continuous flow of work using a visual board, with no fixed sprint cycles, limiting the number of tasks in progress at once. Kanban began in the 1940s at Toyota as part of lean manufacturing, using visual boards and pull systems to improve workflow efficiency.

In practice, most teams use a hybrid of Scrum and Kanban, relying on a Kanban-style board to visualize work while also committing to a defined set of priorities within each sprint. 

A Kanban board is a visual tool that organizes work into columns (such as "Backlog", "Doing", "Review" and "Done") to track tasks, limit work in progress, and improve workflow.

![Source: Wikipedia](images/kanban-board.png)


## Jira and GitHub Projects

Many software programs are available to help support the Agile way of working. The industry leader in large organizations in [Jira](https://www.atlassian.com/software/jira). 

GitHub projects is a lightweight and free alternative. 

- **Jira** – A project management tool widely used for tracking work in Agile teams. It supports Scrum and Kanban boards, backlogs, and reporting.
- **GitHub Projects** – A flexible, board-based system integrated with GitHub repositories, useful for managing tasks alongside code development.  

## Product Requirements Documents (PRDs)

A PRD explains what a product should do, why it’s needed, and how success will be measured. Typical sections include:

- **Overview** – What the product or feature is.
- **Objectives** – Why it’s being built.
- **User Stories / Use Cases** – How users will interact with it.
- **Functional Requirements** – Specific capabilities and behaviors.
- **Non-Functional Requirements** – Performance, security, or usability standards.
- **Success Metrics** – How you’ll know it’s working.

PRDs help ensure everyone including design, engineering, and marketing share the same understanding of what’s being built and why.

You can view examples of PRDs [**here.**](https://www.lennysnewsletter.com/i/683946/pagersprds)

### AI Impact on PRDs

For some digital products, AI is rapidly changing what it means to write a PRD and what it contains. 

::: tweet-center
<blockquote class="twitter-tweet">

<p lang="en" dir="ltr">
At <a href="https://twitter.com/Google?ref_src=twsrc%5Etfw">@Google</a>, we are moving from a writing-first culture to a building-first one.<br><br>Writing was a proxy for clear thinking, optimized for scarce eng resources and long dev cycles - you had to get it right before you built.<br><br>Now, when time to vibe-code prototype ≈ time to write PRD,…
</p>

— Madhu Guru (@realmadhuguru) <a href="https://twitter.com/realmadhuguru/status/1950336434126336154?ref_src=twsrc%5Etfw">July 29, 2025</a>

</blockquote>
:::

```{=html}
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
```

At a minimum, AI can now draft major parts of the PRD. If stored as a series of Markdown files, the PRD can also serve as structured input for AI coding assistants like Claude Code, enabling faster product building.

In July 2025, Amazon launched a new AI coding IDE called [Kiro](https://kiro.dev/) where they've leaned heavily into using PRD like Markdown files to enforce discipline into the AI coding process. 

#### Kiro's Approach

Kiro's suggested work flow consists of the following steps:

The workflow follows a logical progression with decision points between phases, ensuring each step is properly completed before moving to the next.

1. Requirements Phase: Define user stories and acceptance criteria in structured EARS notation
2. Design Phase: Document the technical architecture, sequence diagrams, and implementation considerations
3. Implementation Planning: Break down the work into discrete, trackable tasks with clear descriptions and outcomes
4. Execution Phase: Track progress as tasks are completed, with the ability to update and refine the spec as needed

Furthermore, you can give the AI coding assistant a set of [Steering](https://kiro.dev/docs/steering/) documents that it keeps as context at all times. 

**Product Overview (product.md)** - Defines your product's purpose, target users, key features, and business objectives. This helps Kiro understand the "why" behind technical decisions and suggest solutions aligned with your product goals.

**Technology Stack (tech.md)** - Documents your chosen frameworks, libraries, development tools, and technical constraints. When Kiro suggests implementations, it will prefer your established stack over alternatives.

**Project Structure (structure.md)** - Outlines file organization, naming conventions, import patterns, and architectural decisions. This ensures generated code fits seamlessly into your existing codebase.

You can explore implementing [Kiro’s General Workflow within Claude Code](https://ashexplained.com/kiro-ide-workflow-claude-code-slash-commands/) using this  [repo](https://github.com/AshExplained/ccspecdev).

## Agile Jargon for New Product Managers

- **Agile**: An iterative approach to software development that focuses on collaboration, customer feedback, and small, rapid releases.  
- **Scrum**: A popular Agile framework using fixed-length iterations (sprints) to deliver increments of work.  
- **Sprint**: A time-boxed iteration (commonly 1–4 weeks) in which a team delivers a potentially shippable product increment.  
- **Backlog**: An ordered list of work items (features, bugs, tasks) maintained for the product or sprint.  
- **Product Backlog**: The master list of all desired work on a product, owned by the Product Owner.  
- **Sprint Backlog**: The set of items selected from the product backlog to complete during a sprint.  
- **User Story**: A short, simple description of a feature told from the perspective of the user (e.g., “As a [user], I want [goal] so that [benefit]”).  
- **Epic**: A large user story or initiative that can be broken down into smaller stories.  
- **Story Points**: A relative measure of effort or complexity used to estimate backlog items.  
- **Velocity**: The amount of work (story points) a team can complete in a sprint, used for forecasting.  
- **Burn-Down Chart**: A visual chart showing the remaining work versus time in a sprint.  
- **Burn-Up Chart**: A chart that shows work completed over time toward a defined scope.  
- **Increment**: The sum of all completed product backlog items at the end of a sprint that is potentially shippable.  
- **Definition of Done (DoD)**: A shared agreement on what it means for work to be complete (e.g., coded, tested, documented).  
- **Product Owner (PO)**: The role responsible for maximizing product value and managing the backlog.  
- **Scrum Master**: The facilitator who helps the team follow Agile principles and removes obstacles.  
- **Development Team**: The cross-functional group responsible for delivering increments of the product.  
- **Daily Stand-Up (Daily Scrum)**: A short daily meeting (typically 15 minutes) where the team synchronizes work and identifies blockers.  
- **Retrospective**: A sprint-ending meeting where the team reflects on how to improve processes and collaboration.  
- **Sprint Review**: A meeting at the end of a sprint to demonstrate what was built and gather stakeholder feedback.  
- **Kanban**: An Agile method focused on continuous flow of work and visualization of tasks using a Kanban board.  
- **WIP (Work in Progress) Limit**: A constraint on how many items can be in progress at once to encourage focus and flow.  
- **Time-Boxing**: Setting a fixed maximum amount of time for an activity (e.g., sprint length, stand-up duration).  
- **Minimum Viable Product (MVP)**: The smallest set of features that delivers value to users and validates assumptions.  
- **Iteration**: Another word for sprint; a cycle of work that delivers an increment of value.  
- **Servant Leadership**: A leadership philosophy used in Agile where leaders focus on serving the team to maximize performance.  
- **Cross-Functional Team**: A team that has all the skills necessary to deliver increments without dependencies on others.  

